{
  "address": "0xFB4c8c1769E721F0fCfcEe439e241b6944Bc991d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minMintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensInCurrentDrop",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_maxTokensPerMint",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_maxTokensPerOwner",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_creatorRoyaltyBP",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_royaltyTreasury",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_mintTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "BalanceWithdrawl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CreateNooki",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wlAddresses",
          "type": "address[]"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorRoyaltyBP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "giveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensInCurrentDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerMint",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerOwner",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "count",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTreasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wlAddress",
          "type": "address"
        }
      ],
      "name": "removeFromWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyTreasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "setMaxTokensInCurrentDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokens",
          "type": "uint16"
        }
      ],
      "name": "setMaxTokensPerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokens",
          "type": "uint16"
        }
      ],
      "name": "setMaxTokensPerOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setMinMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setMintTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "setPauseState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "basePoints",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setRoyaltyTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "setTicketResetDates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "setWhitelistSaleEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ticketResetDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ticketResetDates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSaleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x855a9d5093780b05ecf74b625e9896197db172d2c81bcbe588dc6dbd0f6fc681",
  "receipt": {
    "to": null,
    "from": "0xA50A977C76FB49Fbc3Ba68a4e73CF40053A688FE",
    "contractAddress": "0xFB4c8c1769E721F0fCfcEe439e241b6944Bc991d",
    "transactionIndex": 48,
    "gasUsed": "3560366",
    "logsBloom": "0x000000000000000000800000000000004000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000004000000000000000000000000000a0000000000000000000800000000010040000000000000000000400000000000000000000008000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf14ed882b047c2b0dd0f2432989a59c7519d4b8f4af979f1174bceb023cefa9b",
    "transactionHash": "0x855a9d5093780b05ecf74b625e9896197db172d2c81bcbe588dc6dbd0f6fc681",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 9535293,
        "transactionHash": "0x855a9d5093780b05ecf74b625e9896197db172d2c81bcbe588dc6dbd0f6fc681",
        "address": "0xFB4c8c1769E721F0fCfcEe439e241b6944Bc991d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0xf14ed882b047c2b0dd0f2432989a59c7519d4b8f4af979f1174bceb023cefa9b"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9535293,
        "transactionHash": "0x855a9d5093780b05ecf74b625e9896197db172d2c81bcbe588dc6dbd0f6fc681",
        "address": "0xFB4c8c1769E721F0fCfcEe439e241b6944Bc991d",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe",
        "logIndex": 103,
        "blockHash": "0xf14ed882b047c2b0dd0f2432989a59c7519d4b8f4af979f1174bceb023cefa9b"
      }
    ],
    "blockNumber": 9535293,
    "cumulativeGasUsed": "17277011",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "50000000000000000",
    1000,
    5,
    5,
    850,
    "https://tanuki-metadata.s3.us-west-2.amazonaws.com/public/nooki-contract.json",
    "https://tanuki-metadata.s3.us-west-2.amazonaws.com/public/obscured_tokens/",
    "0x18c05AEE87dCbc444e1fe27e4A65e8b8775f6365",
    "0x665ca8d5CE2ad0Ff7f04cB4289cd6399e048E6C6"
  ],
  "solcInputHash": "7a7fb7dd4877558f80652a86cb4fcff7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensInCurrentDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_maxTokensPerMint\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxTokensPerOwner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_creatorRoyaltyBP\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_royaltyTreasury\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_mintTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreateNooki\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wlAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorRoyaltyBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"giveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensInCurrentDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerMint\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerOwner\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wlAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensInCurrentDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokens\",\"type\":\"uint16\"}],\"name\":\"setMaxTokensPerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokens\",\"type\":\"uint16\"}],\"name\":\"setMaxTokensPerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMinMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setMintTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"setPauseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"basePoints\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setRoyaltyTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setTicketResetDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistSaleEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ticketResetDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ticketResetDates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tanuki-nft.sol\":\"NuttyNooki\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/tanuki-nft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NuttyNooki is ERC721Enumerable, ERC721Pausable, IERC2981, Ownable {\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIdTracker;\\n  bool public whitelistSaleEnabled;\\n  uint public minMintPrice;\\n  uint public maxTokensInCurrentDrop;\\n  uint16 public maxTokensPerMint;\\n  uint16 public maxTokensPerOwner;\\n  uint16 public creatorRoyaltyBP;\\n  string public contractURI;\\n  string public baseTokenURI;\\n  address payable public royaltyTreasury;\\n  address payable public mintTreasury;\\n  mapping(address => bool) public whitelist;\\n  mapping(uint => uint) private _ticketResetDates;\\n\\n  event CreateNooki(uint indexed id);\\n  event BalanceWithdrawl(uint indexed time);\\n  event DonationReceived();\\n\\n  constructor(uint _minMintPrice, uint _maxTokensInCurrentDrop, uint16 _maxTokensPerMint,\\n  uint16 _maxTokensPerOwner, uint16 _creatorRoyaltyBP, string memory _contractURI, \\n  string memory _baseTokenURI, address payable _royaltyTreasury, address payable _mintTreasury)\\n  ERC721(\\\"NuttyNooki\\\", \\\"NOOKI\\\") {\\n    require(_royaltyTreasury != address(0), \\\"Royalty treasury is 0 address\\\");\\n    require(_mintTreasury != address(0), \\\"Mint treasury is 0 address\\\");\\n\\n    minMintPrice = _minMintPrice;\\n    maxTokensInCurrentDrop = _maxTokensInCurrentDrop;\\n    maxTokensPerMint = _maxTokensPerMint;\\n    creatorRoyaltyBP = _creatorRoyaltyBP;\\n    contractURI = _contractURI;\\n    baseTokenURI = _baseTokenURI;\\n    royaltyTreasury = _royaltyTreasury;\\n    mintTreasury = _mintTreasury;\\n    maxTokensPerOwner = _maxTokensPerOwner;\\n    _pause();\\n  }\\n\\n  function royaltyInfo(uint256, uint256 salePrice) external view override(IERC2981) returns (address receiver, uint256 royaltyAmount) {\\n    require(salePrice > 0, \\\"Invalid sale price\\\");\\n    return (royaltyTreasury, (salePrice * creatorRoyaltyBP) / 10000);\\n  }\\n\\n  function mint(address recipient, uint16 count) external payable returns (uint firstTokenId, uint lastTokenId) {\\n    require(count > 0 && count <= maxTokensPerMint, \\\"Count to mint invalid\\\");\\n    require(msg.value >= minMintPrice * count, \\\"Insufficient mint value\\\");\\n    require(balanceOf(recipient) + count <= maxTokensPerOwner, \\\"Token ownership limit for recipient reached\\\");\\n    require(_tokenIdTracker.current() + count <= maxTokensInCurrentDrop, \\\"Drop limit reached\\\");\\n    if(whitelistSaleEnabled) { require(whitelist[recipient], \\\"Recipient is not part of whitelist event\\\"); }\\n\\n    for(uint16 i = 0; i < count; i++) {\\n      _mintToken(recipient);\\n      if(i == 0) { firstTokenId = _tokenIdTracker.current(); }\\n    }\\n\\n    lastTokenId = _tokenIdTracker.current();\\n  }\\n\\n  function _mintToken(address recipient) private {\\n      _tokenIdTracker.increment();\\n      _ticketResetDates[_tokenIdTracker.current()] = block.timestamp;\\n      emit CreateNooki(_tokenIdTracker.current());\\n      _safeMint(recipient, _tokenIdTracker.current());\\n  }\\n\\n  function walletOfOwner(address ownerAddress) external view returns(uint[] memory) {\\n    uint tokenCount = balanceOf(ownerAddress);\\n    uint[] memory tokenIds = new uint[](tokenCount);\\n\\n    for (uint i = 0; i < tokenCount; i++) {\\n      tokenIds[i] = tokenOfOwnerByIndex(ownerAddress, i);\\n    }\\n\\n    return tokenIds;\\n  }\\n\\n  function ticketResetDate(uint tokenId) external view returns(uint) {\\n    require(tokenId > 0 && _exists(tokenId), \\\"Invalid tokenId\\\");\\n    return _ticketResetDates[tokenId];\\n  }\\n\\n  function burn(uint tokenId) external onlyOwner { _burn(tokenId); }\\n  function setMinMintPrice(uint price) external onlyOwner { minMintPrice = price; }\\n  function setMaxTokensInCurrentDrop(uint tokens) external onlyOwner { maxTokensInCurrentDrop = tokens; }\\n  function setMaxTokensPerMint(uint16 tokens) external onlyOwner { maxTokensPerMint = tokens; }\\n  function setMaxTokensPerOwner(uint16 tokens) external onlyOwner { maxTokensPerOwner = tokens; }\\n  function setWhitelistSaleEnabled(bool isEnabled) external onlyOwner { whitelistSaleEnabled = isEnabled; }\\n  function setRoyaltyBP(uint16 basePoints) external onlyOwner { creatorRoyaltyBP = basePoints; }\\n  function setContractURI(string memory metadataURI) external onlyOwner { contractURI = metadataURI; }\\n  function setBaseURI(string memory baseURI) external onlyOwner { baseTokenURI = baseURI; }\\n  function setRoyaltyTreasury(address payable treasury) external onlyOwner {\\n    require(treasury != address(0), \\\"Treasury is 0 address\\\");\\n    royaltyTreasury = treasury;\\n  }\\n  function setMintTreasury(address payable treasury) external onlyOwner {\\n    require(treasury != address(0), \\\"Treasury is 0 address\\\");\\n    mintTreasury = treasury;\\n  }\\n  function setPauseState(bool pauseState) external onlyOwner {\\n    if(pauseState && !paused()) { _pause(); }\\n    else if(!pauseState && paused()) { _unpause(); }\\n  }\\n  function addToWhitelist(address[] memory wlAddresses) external onlyOwner {\\n    for(uint i = 0; i < wlAddresses.length; i++) {\\n      require(wlAddresses[i] != address(0), \\\"New whitelist cannot be the 0 address\\\");\\n    }\\n    \\n    for(uint i = 0; i < wlAddresses.length; i++) {\\n      whitelist[wlAddresses[i]] = true;\\n    }\\n  }\\n  function removeFromWhiteList(address wlAddress) external onlyOwner {\\n    delete whitelist[wlAddress];\\n  }\\n\\n  function withdrawAll() external payable onlyOwner {\\n    uint balance = address(this).balance;\\n    require(balance > 0);\\n\\n    emit BalanceWithdrawl(block.timestamp);\\n\\n    (bool success, ) = mintTreasury.call{value: balance}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n  }\\n\\n  function setTicketResetDates(uint[] memory tokenIds, uint date) external onlyOwner {\\n    for(uint i = 0; i < tokenIds.length; i++) {\\n      _ticketResetDates[tokenIds[i]] = date;\\n    }\\n  }\\n\\n  function ticketResetDates(uint[] memory tokenIds) external view onlyOwner returns(uint[] memory) {\\n    uint[] memory resetDates = new uint[](tokenIds.length);\\n    for(uint i = 0; i < tokenIds.length; i++) {\\n      resetDates[i] = _ticketResetDates[tokenIds[i]];\\n    }\\n    return resetDates;\\n  }\\n\\n  function giveaway(address[] memory recipients) external onlyOwner {\\n    for(uint16 i = 0; i < recipients.length; i++) {\\n      _mintToken(recipients[i]);\\n    }\\n  }\\n\\n  function _baseURI() internal view virtual override(ERC721) returns (string memory) { return baseTokenURI; }\\n  function _transfer(address from, address to, uint256 tokenId) internal override(ERC721) {\\n    _ticketResetDates[tokenId] = block.timestamp;\\n    super._transfer(from, to, tokenId);\\n  }\\n  function _burn(uint256 tokenId) internal override(ERC721) {\\n    delete _ticketResetDates[tokenId];\\n    super._burn(tokenId);\\n  }\\n\\n  // override clashing extension functions\\n  function _beforeTokenTransfer(address from, address to, uint tokenId) internal override(ERC721Pausable, ERC721Enumerable) { super._beforeTokenTransfer(from, to, tokenId); }\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, ERC721, IERC165) returns(bool) {\\n    return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  receive() external payable { emit DonationReceived(); }\\n}\\n\",\"keccak256\":\"0xffc95ef330d4674ed26da3284f1c58032bf7a886014d7326c99f9d90f1fbe08c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003e8638038062003e8683398101604081905262000034916200043b565b604080518082018252600a8152694e757474794e6f6f6b6960b01b6020808301918252835180850190945260058452644e4f4f4b4960d81b9084015281519192916200008391600091620002ba565b50805162000099906001906020840190620002ba565b5050600a805460ff1916905550620000ba620000b4620001d8565b620001dc565b6001600160a01b038216620000ec5760405162461bcd60e51b8152600401620000e39062000552565b60405180910390fd5b6001600160a01b038116620001155760405162461bcd60e51b8152600401620000e39062000589565b600d899055600e889055600f805461ffff8781166401000000000261ffff60201b19918b1661ffff19909316929092171617905583516200015e906010906020870190620002ba565b50825162000174906011906020860190620002ba565b50601280546001600160a01b038085166001600160a01b0319928316179092556013805492841692909116919091179055600f805461ffff8816620100000263ffff000019909116179055620001c962000236565b50505050505050505062000613565b3390565b600a80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000240620002b1565b15620002605760405162461bcd60e51b8152600401620000e39062000528565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000298620001d8565b604051620002a7919062000514565b60405180910390a1565b600a5460ff1690565b828054620002c890620005c0565b90600052602060002090601f016020900481019282620002ec576000855562000337565b82601f106200030757805160ff191683800117855562000337565b8280016001018555821562000337579182015b82811115620003375782518255916020019190600101906200031a565b506200034592915062000349565b5090565b5b808211156200034557600081556001016200034a565b80516001600160a01b03811681146200037857600080fd5b919050565b600082601f8301126200038e578081fd5b81516001600160401b0380821115620003ab57620003ab620005fd565b6040516020601f8401601f1916820181018381118382101715620003d357620003d3620005fd565b6040528382528584018101871015620003ea578485fd5b8492505b838310156200040d5785830181015182840182015291820191620003ee565b838311156200041e57848185840101525b5095945050505050565b805161ffff811681146200037857600080fd5b60008060008060008060008060006101208a8c0312156200045a578485fd5b8951985060208a015197506200047360408b0162000428565b96506200048360608b0162000428565b95506200049360808b0162000428565b60a08b01519095506001600160401b0380821115620004b0578586fd5b620004be8d838e016200037d565b955060c08c0151915080821115620004d4578485fd5b50620004e38c828d016200037d565b935050620004f460e08b0162000360565b9150620005056101008b0162000360565b90509295985092959850929598565b6001600160a01b0391909116815260200190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f526f79616c747920747265617375727920697320302061646472657373000000604082015260600190565b6020808252601a908201527f4d696e7420747265617375727920697320302061646472657373000000000000604082015260600190565b600281046001821680620005d557607f821691505b60208210811415620005f757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61386380620006236000396000f3fe60806040526004361061031e5760003560e01c806370a08231116101ab578063badfff3a116100f7578063e3e3506211610095578063e9a7a5461161006f578063e9a7a54614610913578063ed83e0d614610933578063f2fde38b14610953578063f6bca878146109735761034e565b8063e3e35062146108c9578063e8a3d485146108de578063e985e9c5146108f35761034e565b8063cdb88ad1116100d1578063cdb88ad114610854578063d547cfb714610874578063e28da3b714610889578063e3aaf0f8146108a95761034e565b8063badfff3a146107ff578063c80d123a1461081f578063c87b56dd146108345761034e565b80638da5cb5b116101645780639b19251a1161013e5780639b19251a1461077e578063a22cb4651461079e578063ad0be4bd146107be578063b88d4fde146107df5761034e565b80638da5cb5b14610734578063938e3d7b1461074957806395d89b41146107695761034e565b806370a0823114610697578063715018a6146106b75780637e227f4b146106cc5780637f649783146106ec578063853828b61461070c5780638a727fd5146107145761034e565b806328d46df01161026a57806342966c68116102235780634f6ccce7116101fd5780634f6ccce71461062257806355f804b3146106425780635c975abb146106625780636352211e146106775761034e565b806342966c68146105b5578063434387e7146105d5578063438b6300146105f55761034e565b806328d46df0146104f25780632a55205a146105125780632f745c59146105405780633b98a7df1461056057806342842e0e1461058057806342884801146105a05761034e565b8063095ea7b3116102d757806318160ddd116102b157806318160ddd1461047b5780631c0c6e8a1461049d57806323b872dd146104b25780632451a295146104d25761034e565b8063095ea7b314610424578063174654711461044457806318057bb8146104665761034e565b806301bf66481461035357806301ffc9a71461037557806305e9ca9b146103ab5780630694d6c5146103cd57806306fdde03146103e2578063081812fc146104045761034e565b3661034e576040517fe554fffbd0e5c2a35b0a24fef85d4297554111caf74cc33cb4cc85a117bbe6e090600090a1005b600080fd5b34801561035f57600080fd5b5061037361036e3660046129c5565b610993565b005b34801561038157600080fd5b50610395610390366004612c80565b6109fc565b6040516103a29190612e5d565b60405180910390f35b3480156103b757600080fd5b506103c0610a29565b6040516103a29190612daf565b3480156103d957600080fd5b50610395610a38565b3480156103ee57600080fd5b506103f7610a41565b6040516103a29190612e68565b34801561041057600080fd5b506103c061041f366004612d18565b610ad3565b34801561043057600080fd5b5061037361043f366004612b2c565b610b16565b34801561045057600080fd5b50610459610bae565b6040516103a29190613632565b34801561047257600080fd5b50610459610bb8565b34801561048757600080fd5b50610490610bca565b6040516103a29190613641565b3480156104a957600080fd5b50610490610bd0565b3480156104be57600080fd5b506103736104cd366004612a19565b610bd6565b3480156104de57600080fd5b506103736104ed366004612d18565b610c0e565b3480156104fe57600080fd5b5061037361050d366004612b57565b610c52565b34801561051e57600080fd5b5061053261052d366004612d30565b610ceb565b6040516103a2929190612e00565b34801561054c57600080fd5b5061049061055b366004612b2c565b610d4f565b34801561056c57600080fd5b5061037361057b3660046129c5565b610da1565b34801561058c57600080fd5b5061037361059b366004612a19565b610e28565b3480156105ac57600080fd5b50610459610e43565b3480156105c157600080fd5b506103736105d0366004612d18565b610e53565b3480156105e157600080fd5b506103736105f0366004612cfe565b610e9e565b34801561060157600080fd5b506106156106103660046129c5565b610efd565b6040516103a29190612e19565b34801561062e57600080fd5b5061049061063d366004612d18565b610fbb565b34801561064e57600080fd5b5061037361065d366004612cb8565b611016565b34801561066e57600080fd5b50610395611068565b34801561068357600080fd5b506103c0610692366004612d18565b611071565b3480156106a357600080fd5b506104906106b23660046129c5565b6110a6565b3480156106c357600080fd5b506103736110ea565b3480156106d857600080fd5b506103736106e73660046129c5565b611135565b3480156106f857600080fd5b50610373610707366004612b57565b6111bc565b6103736112ea565b34801561072057600080fd5b5061049061072f366004612d18565b6113e0565b34801561074057600080fd5b506103c0611424565b34801561075557600080fd5b50610373610764366004612cb8565b611438565b34801561077557600080fd5b506103f761148a565b34801561078a57600080fd5b506103956107993660046129c5565b611499565b3480156107aa57600080fd5b506103736107b9366004612ad6565b6114ae565b6107d16107cc366004612b01565b61157c565b6040516103a292919061364a565b3480156107eb57600080fd5b506103736107fa366004612a59565b611702565b34801561080b57600080fd5b5061037361081a366004612c23565b611741565b34801561082b57600080fd5b506104906117de565b34801561084057600080fd5b506103f761084f366004612d18565b6117e4565b34801561086057600080fd5b5061037361086f366004612c66565b611867565b34801561088057600080fd5b506103f76118e8565b34801561089557600080fd5b506103736108a4366004612c66565b611976565b3480156108b557600080fd5b506103736108c4366004612cfe565b6119c8565b3480156108d557600080fd5b506103c0611a1f565b3480156108ea57600080fd5b506103f7611a2e565b3480156108ff57600080fd5b5061039561090e3660046129e1565b611a3b565b34801561091f57600080fd5b5061037361092e366004612cfe565b611a69565b34801561093f57600080fd5b5061061561094e366004612bf0565b611acc565b34801561095f57600080fd5b5061037361096e3660046129c5565b611bee565b34801561097f57600080fd5b5061037361098e366004612d18565b611c5c565b61099b611ca0565b6001600160a01b03166109ac611424565b6001600160a01b0316146109db5760405162461bcd60e51b81526004016109d290613413565b60405180910390fd5b6001600160a01b03166000908152601460205260409020805460ff19169055565b60006001600160e01b0319821663152a902d60e11b1480610a215750610a2182611ca4565b90505b919050565b6012546001600160a01b031681565b600c5460ff1681565b606060008054610a5090613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7c90613734565b8015610ac95780601f10610a9e57610100808354040283529160200191610ac9565b820191906000526020600020905b815481529060010190602001808311610aac57829003601f168201915b5050505050905090565b6000610ade82611cc9565b610afa5760405162461bcd60e51b81526004016109d2906133c7565b506000908152600460205260409020546001600160a01b031690565b6000610b2182611071565b9050806001600160a01b0316836001600160a01b03161415610b555760405162461bcd60e51b81526004016109d29061350f565b806001600160a01b0316610b67611ca0565b6001600160a01b03161480610b835750610b838161090e611ca0565b610b9f5760405162461bcd60e51b81526004016109d290613257565b610ba98383611ce6565b505050565b600f5461ffff1681565b600f54640100000000900461ffff1681565b60085490565b600e5481565b610be7610be1611ca0565b82611d54565b610c035760405162461bcd60e51b81526004016109d290613550565b610ba9838383611dd9565b610c16611ca0565b6001600160a01b0316610c27611424565b6001600160a01b031614610c4d5760405162461bcd60e51b81526004016109d290613413565b600e55565b610c5a611ca0565b6001600160a01b0316610c6b611424565b6001600160a01b031614610c915760405162461bcd60e51b81526004016109d290613413565b60005b81518161ffff161015610ce757610cd5828261ffff1681518110610cc857634e487b7160e01b600052603260045260246000fd5b6020026020010151611df5565b80610cdf8161376f565b915050610c94565b5050565b60008060008311610d0e5760405162461bcd60e51b81526004016109d2906130c9565b601254600f546001600160a01b039091169061271090610d3a90640100000000900461ffff16866136d2565b610d4491906136be565b915091509250929050565b6000610d5a836110a6565b8210610d785760405162461bcd60e51b81526004016109d290612f2b565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610da9611ca0565b6001600160a01b0316610dba611424565b6001600160a01b031614610de05760405162461bcd60e51b81526004016109d290613413565b6001600160a01b038116610e065760405162461bcd60e51b81526004016109d2906134e0565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b610ba983838360405180602001604052806000815250611702565b600f5462010000900461ffff1681565b610e5b611ca0565b6001600160a01b0316610e6c611424565b6001600160a01b031614610e925760405162461bcd60e51b81526004016109d290613413565b610e9b81611e65565b50565b610ea6611ca0565b6001600160a01b0316610eb7611424565b6001600160a01b031614610edd5760405162461bcd60e51b81526004016109d290613413565b600f805461ffff909216620100000263ffff000019909216919091179055565b60606000610f0a836110a6565b905060008167ffffffffffffffff811115610f3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e578160200160208202803683370190505b50905060005b82811015610fb357610f768582610d4f565b828281518110610f9657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610fab81613791565b915050610f64565b509392505050565b6000610fc5610bca565b8210610fe35760405162461bcd60e51b81526004016109d2906135a1565b6008828154811061100457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b61101e611ca0565b6001600160a01b031661102f611424565b6001600160a01b0316146110555760405162461bcd60e51b81526004016109d290613413565b8051610ce7906011906020840190612846565b600a5460ff1690565b6000818152600260205260408120546001600160a01b031680610a215760405162461bcd60e51b81526004016109d2906132fe565b60006001600160a01b0382166110ce5760405162461bcd60e51b81526004016109d2906132b4565b506001600160a01b031660009081526003602052604090205490565b6110f2611ca0565b6001600160a01b0316611103611424565b6001600160a01b0316146111295760405162461bcd60e51b81526004016109d290613413565b6111336000611e7d565b565b61113d611ca0565b6001600160a01b031661114e611424565b6001600160a01b0316146111745760405162461bcd60e51b81526004016109d290613413565b6001600160a01b03811661119a5760405162461bcd60e51b81526004016109d2906134e0565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6111c4611ca0565b6001600160a01b03166111d5611424565b6001600160a01b0316146111fb5760405162461bcd60e51b81526004016109d290613413565b60005b81518110156112735760006001600160a01b031682828151811061123257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156112615760405162461bcd60e51b81526004016109d2906135ed565b8061126b81613791565b9150506111fe565b5060005b8151811015610ce7576001601460008484815181106112a657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806112e281613791565b915050611277565b6112f2611ca0565b6001600160a01b0316611303611424565b6001600160a01b0316146113295760405162461bcd60e51b81526004016109d290613413565b478061133457600080fd5b60405142907feede8f531dfe8867abb4d42c23573eb3fb93a5b7779d3f0bf3a86ce1c724985390600090a26013546040516000916001600160a01b031690839061137d90612dac565b60006040518083038185875af1925050503d80600081146113ba576040519150601f19603f3d011682016040523d82523d6000602084013e6113bf565b606091505b5050905080610ce75760405162461bcd60e51b81526004016109d290613045565b600080821180156113f557506113f582611cc9565b6114115760405162461bcd60e51b81526004016109d2906131b8565b5060009081526015602052604090205490565b600a5461010090046001600160a01b031690565b611440611ca0565b6001600160a01b0316611451611424565b6001600160a01b0316146114775760405162461bcd60e51b81526004016109d290613413565b8051610ce7906010906020840190612846565b606060018054610a5090613734565b60146020526000908152604090205460ff1681565b6114b6611ca0565b6001600160a01b0316826001600160a01b031614156114e75760405162461bcd60e51b81526004016109d290613181565b80600560006114f4611ca0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611538611ca0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115709190612e5d565b60405180910390a35050565b60008060008361ffff1611801561159d5750600f5461ffff90811690841611155b6115b95760405162461bcd60e51b81526004016109d29061309a565b8261ffff16600d546115cb91906136d2565b3410156115ea5760405162461bcd60e51b81526004016109d290612ef4565b600f5461ffff620100009091048116908416611605866110a6565b61160f91906136a6565b111561162d5760405162461bcd60e51b81526004016109d290613347565b600e548361ffff1661163f600b611ed7565b61164991906136a6565b11156116675760405162461bcd60e51b81526004016109d29061306e565b600c5460ff16156116aa576001600160a01b03841660009081526014602052604090205460ff166116aa5760405162461bcd60e51b81526004016109d290613139565b60005b8361ffff168161ffff1610156116ee576116c685611df5565b61ffff81166116dc576116d9600b611ed7565b92505b806116e68161376f565b9150506116ad565b506116f9600b611ed7565b90509250929050565b61171361170d611ca0565b83611d54565b61172f5760405162461bcd60e51b81526004016109d290613550565b61173b84848484611edb565b50505050565b611749611ca0565b6001600160a01b031661175a611424565b6001600160a01b0316146117805760405162461bcd60e51b81526004016109d290613413565b60005b8251811015610ba95781601560008584815181106117b157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806117d690613791565b915050611783565b600d5481565b60606117ef82611cc9565b61180b5760405162461bcd60e51b81526004016109d290613491565b6000611815611f0e565b905060008151116118355760405180602001604052806000815250611860565b8061183f84611f1d565b604051602001611850929190612d7d565b6040516020818303038152906040525b9392505050565b61186f611ca0565b6001600160a01b0316611880611424565b6001600160a01b0316146118a65760405162461bcd60e51b81526004016109d290613413565b8080156118b857506118b6611068565b155b156118ca576118c5612038565b610e9b565b801580156118db57506118db611068565b15610e9b57610e9b6120aa565b601180546118f590613734565b80601f016020809104026020016040519081016040528092919081815260200182805461192190613734565b801561196e5780601f106119435761010080835404028352916020019161196e565b820191906000526020600020905b81548152906001019060200180831161195157829003601f168201915b505050505081565b61197e611ca0565b6001600160a01b031661198f611424565b6001600160a01b0316146119b55760405162461bcd60e51b81526004016109d290613413565b600c805460ff1916911515919091179055565b6119d0611ca0565b6001600160a01b03166119e1611424565b6001600160a01b031614611a075760405162461bcd60e51b81526004016109d290613413565b600f805461ffff191661ffff92909216919091179055565b6013546001600160a01b031681565b601080546118f590613734565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611a71611ca0565b6001600160a01b0316611a82611424565b6001600160a01b031614611aa85760405162461bcd60e51b81526004016109d290613413565b600f805461ffff9092166401000000000265ffff0000000019909216919091179055565b6060611ad6611ca0565b6001600160a01b0316611ae7611424565b6001600160a01b031614611b0d5760405162461bcd60e51b81526004016109d290613413565b6000825167ffffffffffffffff811115611b3757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b60578160200160208202803683370190505b50905060005b8351811015611be75760156000858381518110611b9357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054828281518110611bca57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611bdf81613791565b915050611b66565b5092915050565b611bf6611ca0565b6001600160a01b0316611c07611424565b6001600160a01b031614611c2d5760405162461bcd60e51b81526004016109d290613413565b6001600160a01b038116611c535760405162461bcd60e51b81526004016109d290612fc8565b610e9b81611e7d565b611c64611ca0565b6001600160a01b0316611c75611424565b6001600160a01b031614611c9b5760405162461bcd60e51b81526004016109d290613413565b600d55565b3390565b60006001600160e01b0319821663780e9d6360e01b1480610a215750610a2182612101565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d1b82611071565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611d5f82611cc9565b611d7b5760405162461bcd60e51b81526004016109d2906131e1565b6000611d8683611071565b9050806001600160a01b0316846001600160a01b03161480611dc15750836001600160a01b0316611db684610ad3565b6001600160a01b0316145b80611dd15750611dd18185611a3b565b949350505050565b6000818152601560205260409020429055610ba9838383612141565b611dff600b61226e565b4260156000611e0e600b611ed7565b8152602081019190915260400160002055611e29600b611ed7565b6040517f128808f22de7bb1e3ffd9c206885e55a5e23da0baf99665e5146706b4dd1b89790600090a2610e9b81611e60600b611ed7565b612277565b600081815260156020526040812055610e9b81612291565b600a80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b5490565b611ee6848484611dd9565b611ef284848484612338565b61173b5760405162461bcd60e51b81526004016109d290612f76565b606060118054610a5090613734565b606081611f4257506040805180820190915260018152600360fc1b6020820152610a24565b8160005b8115611f6c5780611f5681613791565b9150611f659050600a836136be565b9150611f46565b60008167ffffffffffffffff811115611f9557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fbf576020820181803683370190505b5090505b8415611dd157611fd46001836136f1565b9150611fe1600a866137ac565b611fec9060306136a6565b60f81b81838151811061200f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612031600a866136be565b9450611fc3565b612040611068565b1561205d5760405162461bcd60e51b81526004016109d29061322d565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612093611ca0565b6040516120a09190612daf565b60405180910390a1565b6120b2611068565b6120ce5760405162461bcd60e51b81526004016109d290612ec6565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612093611ca0565b60006001600160e01b031982166380ac58cd60e01b148061213257506001600160e01b03198216635b5e139f60e01b145b80610a215750610a2182612453565b826001600160a01b031661215482611071565b6001600160a01b03161461217a5760405162461bcd60e51b81526004016109d290613448565b6001600160a01b0382166121a05760405162461bcd60e51b81526004016109d2906130f5565b6121ab83838361246c565b6121b6600082611ce6565b6001600160a01b03831660009081526003602052604081208054600192906121df9084906136f1565b90915550506001600160a01b038216600090815260036020526040812080546001929061220d9084906136a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b80546001019055565b610ce7828260405180602001604052806000815250612477565b600061229c82611071565b90506122aa8160008461246c565b6122b5600083611ce6565b6001600160a01b03811660009081526003602052604081208054600192906122de9084906136f1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600061234c846001600160a01b03166124aa565b1561244857836001600160a01b031663150b7a02612368611ca0565b8786866040518563ffffffff1660e01b815260040161238a9493929190612dc3565b602060405180830381600087803b1580156123a457600080fd5b505af19250505080156123d4575060408051601f3d908101601f191682019092526123d191810190612c9c565b60015b61242e573d808015612402576040519150601f19603f3d011682016040523d82523d6000602084013e612407565b606091505b5080516124265760405162461bcd60e51b81526004016109d290612f76565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611dd1565b506001949350505050565b6001600160e01b031981166301ffc9a760e01b14919050565b610ba98383836124b0565b61248183836124e0565b61248e6000848484612338565b610ba95760405162461bcd60e51b81526004016109d290612f76565b3b151590565b6124bb8383836125bf565b6124c3611068565b15610ba95760405162461bcd60e51b81526004016109d290612e7b565b6001600160a01b0382166125065760405162461bcd60e51b81526004016109d290613392565b61250f81611cc9565b1561252c5760405162461bcd60e51b81526004016109d29061300e565b6125386000838361246c565b6001600160a01b03821660009081526003602052604081208054600192906125619084906136a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6125ca838383610ba9565b6001600160a01b0383166125e6576125e181612648565b612609565b816001600160a01b0316836001600160a01b03161461260957612609838261268c565b6001600160a01b0382166126255761262081612729565b610ba9565b826001600160a01b0316826001600160a01b031614610ba957610ba98282612802565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b60006001612699846110a6565b6126a391906136f1565b6000838152600760205260409020549091508082146126f6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061273b906001906136f1565b6000838152600960205260408120546008805493945090928490811061277157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106127a057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127e657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061280d836110a6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461285290613734565b90600052602060002090601f01602090048101928261287457600085556128ba565b82601f1061288d57805160ff19168380011785556128ba565b828001600101855582156128ba579182015b828111156128ba57825182559160200191906001019061289f565b506128c69291506128ca565b5090565b5b808211156128c657600081556001016128cb565b600067ffffffffffffffff8311156128f9576128f96137ec565b61290c601f8401601f1916602001613658565b905082815283838301111561292057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612947578081fd5b8135602061295c61295783613682565b613658565b8281528181019085830183850287018401881015612978578586fd5b855b858110156129965781358452928401929084019060010161297a565b5090979650505050505050565b80358015158114610a2457600080fd5b803561ffff81168114610a2457600080fd5b6000602082840312156129d6578081fd5b813561186081613802565b600080604083850312156129f3578081fd5b82356129fe81613802565b91506020830135612a0e81613802565b809150509250929050565b600080600060608486031215612a2d578081fd5b8335612a3881613802565b92506020840135612a4881613802565b929592945050506040919091013590565b60008060008060808587031215612a6e578081fd5b8435612a7981613802565b93506020850135612a8981613802565b925060408501359150606085013567ffffffffffffffff811115612aab578182fd5b8501601f81018713612abb578182fd5b612aca878235602084016128df565b91505092959194509250565b60008060408385031215612ae8578182fd5b8235612af381613802565b91506116f9602084016129a3565b60008060408385031215612b13578182fd5b8235612b1e81613802565b91506116f9602084016129b3565b60008060408385031215612b3e578182fd5b8235612b4981613802565b946020939093013593505050565b60006020808385031215612b69578182fd5b823567ffffffffffffffff811115612b7f578283fd5b8301601f81018513612b8f578283fd5b8035612b9d61295782613682565b8181528381019083850185840285018601891015612bb9578687fd5b8694505b83851015612be4578035612bd081613802565b835260019490940193918501918501612bbd565b50979650505050505050565b600060208284031215612c01578081fd5b813567ffffffffffffffff811115612c17578182fd5b611dd184828501612937565b60008060408385031215612c35578182fd5b823567ffffffffffffffff811115612c4b578283fd5b612c5785828601612937565b95602094909401359450505050565b600060208284031215612c77578081fd5b611860826129a3565b600060208284031215612c91578081fd5b813561186081613817565b600060208284031215612cad578081fd5b815161186081613817565b600060208284031215612cc9578081fd5b813567ffffffffffffffff811115612cdf578182fd5b8201601f81018413612cef578182fd5b611dd1848235602084016128df565b600060208284031215612d0f578081fd5b611860826129b3565b600060208284031215612d29578081fd5b5035919050565b60008060408385031215612d42578182fd5b50508035926020909101359150565b60008151808452612d69816020860160208601613708565b601f01601f19169290920160200192915050565b60008351612d8f818460208801613708565b835190830190612da3818360208801613708565b01949350505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612df690830184612d51565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612e5157835183529284019291840191600101612e35565b50909695505050505050565b901515815260200190565b6000602082526118606020830184612d51565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526017908201527f496e73756666696369656e74206d696e742076616c7565000000000000000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600f908201526e15da5d1a191c985dc819985a5b1959608a1b604082015260600190565b602080825260129082015271111c9bdc081b1a5b5a5d081c995858da195960721b604082015260600190565b60208082526015908201527410dbdd5b9d081d1bc81b5a5b9d081a5b9d985b1a59605a1b604082015260600190565b602080825260129082015271496e76616c69642073616c6520707269636560701b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526028908201527f526563697069656e74206973206e6f742070617274206f662077686974656c696040820152671cdd08195d995b9d60c21b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252600f908201526e125b9d985b1a59081d1bdad95b9259608a1b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602b908201527f546f6b656e206f776e657273686970206c696d697420666f722072656369706960408201526a195b9d081c995858da195960aa1b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526015908201527454726561737572792069732030206164647265737360581b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f4e65772077686974656c6973742063616e6e6f74206265207468652030206164604082015264647265737360d81b606082015260800190565b61ffff91909116815260200190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561367a5761367a6137ec565b604052919050565b600067ffffffffffffffff82111561369c5761369c6137ec565b5060209081020190565b600082198211156136b9576136b96137c0565b500190565b6000826136cd576136cd6137d6565b500490565b60008160001904831182151516156136ec576136ec6137c0565b500290565b600082821015613703576137036137c0565b500390565b60005b8381101561372357818101518382015260200161370b565b8381111561173b5750506000910152565b60028104600182168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415613787576137876137c0565b6001019392505050565b60006000198214156137a5576137a56137c0565b5060010190565b6000826137bb576137bb6137d6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9b57600080fd5b6001600160e01b031981168114610e9b57600080fdfea2646970667358221220c0f051050dfa8ce6996acea64d1a882e27c6a59bf889dd9310d5a0a92b9e509c64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061031e5760003560e01c806370a08231116101ab578063badfff3a116100f7578063e3e3506211610095578063e9a7a5461161006f578063e9a7a54614610913578063ed83e0d614610933578063f2fde38b14610953578063f6bca878146109735761034e565b8063e3e35062146108c9578063e8a3d485146108de578063e985e9c5146108f35761034e565b8063cdb88ad1116100d1578063cdb88ad114610854578063d547cfb714610874578063e28da3b714610889578063e3aaf0f8146108a95761034e565b8063badfff3a146107ff578063c80d123a1461081f578063c87b56dd146108345761034e565b80638da5cb5b116101645780639b19251a1161013e5780639b19251a1461077e578063a22cb4651461079e578063ad0be4bd146107be578063b88d4fde146107df5761034e565b80638da5cb5b14610734578063938e3d7b1461074957806395d89b41146107695761034e565b806370a0823114610697578063715018a6146106b75780637e227f4b146106cc5780637f649783146106ec578063853828b61461070c5780638a727fd5146107145761034e565b806328d46df01161026a57806342966c68116102235780634f6ccce7116101fd5780634f6ccce71461062257806355f804b3146106425780635c975abb146106625780636352211e146106775761034e565b806342966c68146105b5578063434387e7146105d5578063438b6300146105f55761034e565b806328d46df0146104f25780632a55205a146105125780632f745c59146105405780633b98a7df1461056057806342842e0e1461058057806342884801146105a05761034e565b8063095ea7b3116102d757806318160ddd116102b157806318160ddd1461047b5780631c0c6e8a1461049d57806323b872dd146104b25780632451a295146104d25761034e565b8063095ea7b314610424578063174654711461044457806318057bb8146104665761034e565b806301bf66481461035357806301ffc9a71461037557806305e9ca9b146103ab5780630694d6c5146103cd57806306fdde03146103e2578063081812fc146104045761034e565b3661034e576040517fe554fffbd0e5c2a35b0a24fef85d4297554111caf74cc33cb4cc85a117bbe6e090600090a1005b600080fd5b34801561035f57600080fd5b5061037361036e3660046129c5565b610993565b005b34801561038157600080fd5b50610395610390366004612c80565b6109fc565b6040516103a29190612e5d565b60405180910390f35b3480156103b757600080fd5b506103c0610a29565b6040516103a29190612daf565b3480156103d957600080fd5b50610395610a38565b3480156103ee57600080fd5b506103f7610a41565b6040516103a29190612e68565b34801561041057600080fd5b506103c061041f366004612d18565b610ad3565b34801561043057600080fd5b5061037361043f366004612b2c565b610b16565b34801561045057600080fd5b50610459610bae565b6040516103a29190613632565b34801561047257600080fd5b50610459610bb8565b34801561048757600080fd5b50610490610bca565b6040516103a29190613641565b3480156104a957600080fd5b50610490610bd0565b3480156104be57600080fd5b506103736104cd366004612a19565b610bd6565b3480156104de57600080fd5b506103736104ed366004612d18565b610c0e565b3480156104fe57600080fd5b5061037361050d366004612b57565b610c52565b34801561051e57600080fd5b5061053261052d366004612d30565b610ceb565b6040516103a2929190612e00565b34801561054c57600080fd5b5061049061055b366004612b2c565b610d4f565b34801561056c57600080fd5b5061037361057b3660046129c5565b610da1565b34801561058c57600080fd5b5061037361059b366004612a19565b610e28565b3480156105ac57600080fd5b50610459610e43565b3480156105c157600080fd5b506103736105d0366004612d18565b610e53565b3480156105e157600080fd5b506103736105f0366004612cfe565b610e9e565b34801561060157600080fd5b506106156106103660046129c5565b610efd565b6040516103a29190612e19565b34801561062e57600080fd5b5061049061063d366004612d18565b610fbb565b34801561064e57600080fd5b5061037361065d366004612cb8565b611016565b34801561066e57600080fd5b50610395611068565b34801561068357600080fd5b506103c0610692366004612d18565b611071565b3480156106a357600080fd5b506104906106b23660046129c5565b6110a6565b3480156106c357600080fd5b506103736110ea565b3480156106d857600080fd5b506103736106e73660046129c5565b611135565b3480156106f857600080fd5b50610373610707366004612b57565b6111bc565b6103736112ea565b34801561072057600080fd5b5061049061072f366004612d18565b6113e0565b34801561074057600080fd5b506103c0611424565b34801561075557600080fd5b50610373610764366004612cb8565b611438565b34801561077557600080fd5b506103f761148a565b34801561078a57600080fd5b506103956107993660046129c5565b611499565b3480156107aa57600080fd5b506103736107b9366004612ad6565b6114ae565b6107d16107cc366004612b01565b61157c565b6040516103a292919061364a565b3480156107eb57600080fd5b506103736107fa366004612a59565b611702565b34801561080b57600080fd5b5061037361081a366004612c23565b611741565b34801561082b57600080fd5b506104906117de565b34801561084057600080fd5b506103f761084f366004612d18565b6117e4565b34801561086057600080fd5b5061037361086f366004612c66565b611867565b34801561088057600080fd5b506103f76118e8565b34801561089557600080fd5b506103736108a4366004612c66565b611976565b3480156108b557600080fd5b506103736108c4366004612cfe565b6119c8565b3480156108d557600080fd5b506103c0611a1f565b3480156108ea57600080fd5b506103f7611a2e565b3480156108ff57600080fd5b5061039561090e3660046129e1565b611a3b565b34801561091f57600080fd5b5061037361092e366004612cfe565b611a69565b34801561093f57600080fd5b5061061561094e366004612bf0565b611acc565b34801561095f57600080fd5b5061037361096e3660046129c5565b611bee565b34801561097f57600080fd5b5061037361098e366004612d18565b611c5c565b61099b611ca0565b6001600160a01b03166109ac611424565b6001600160a01b0316146109db5760405162461bcd60e51b81526004016109d290613413565b60405180910390fd5b6001600160a01b03166000908152601460205260409020805460ff19169055565b60006001600160e01b0319821663152a902d60e11b1480610a215750610a2182611ca4565b90505b919050565b6012546001600160a01b031681565b600c5460ff1681565b606060008054610a5090613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7c90613734565b8015610ac95780601f10610a9e57610100808354040283529160200191610ac9565b820191906000526020600020905b815481529060010190602001808311610aac57829003601f168201915b5050505050905090565b6000610ade82611cc9565b610afa5760405162461bcd60e51b81526004016109d2906133c7565b506000908152600460205260409020546001600160a01b031690565b6000610b2182611071565b9050806001600160a01b0316836001600160a01b03161415610b555760405162461bcd60e51b81526004016109d29061350f565b806001600160a01b0316610b67611ca0565b6001600160a01b03161480610b835750610b838161090e611ca0565b610b9f5760405162461bcd60e51b81526004016109d290613257565b610ba98383611ce6565b505050565b600f5461ffff1681565b600f54640100000000900461ffff1681565b60085490565b600e5481565b610be7610be1611ca0565b82611d54565b610c035760405162461bcd60e51b81526004016109d290613550565b610ba9838383611dd9565b610c16611ca0565b6001600160a01b0316610c27611424565b6001600160a01b031614610c4d5760405162461bcd60e51b81526004016109d290613413565b600e55565b610c5a611ca0565b6001600160a01b0316610c6b611424565b6001600160a01b031614610c915760405162461bcd60e51b81526004016109d290613413565b60005b81518161ffff161015610ce757610cd5828261ffff1681518110610cc857634e487b7160e01b600052603260045260246000fd5b6020026020010151611df5565b80610cdf8161376f565b915050610c94565b5050565b60008060008311610d0e5760405162461bcd60e51b81526004016109d2906130c9565b601254600f546001600160a01b039091169061271090610d3a90640100000000900461ffff16866136d2565b610d4491906136be565b915091509250929050565b6000610d5a836110a6565b8210610d785760405162461bcd60e51b81526004016109d290612f2b565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610da9611ca0565b6001600160a01b0316610dba611424565b6001600160a01b031614610de05760405162461bcd60e51b81526004016109d290613413565b6001600160a01b038116610e065760405162461bcd60e51b81526004016109d2906134e0565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b610ba983838360405180602001604052806000815250611702565b600f5462010000900461ffff1681565b610e5b611ca0565b6001600160a01b0316610e6c611424565b6001600160a01b031614610e925760405162461bcd60e51b81526004016109d290613413565b610e9b81611e65565b50565b610ea6611ca0565b6001600160a01b0316610eb7611424565b6001600160a01b031614610edd5760405162461bcd60e51b81526004016109d290613413565b600f805461ffff909216620100000263ffff000019909216919091179055565b60606000610f0a836110a6565b905060008167ffffffffffffffff811115610f3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e578160200160208202803683370190505b50905060005b82811015610fb357610f768582610d4f565b828281518110610f9657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610fab81613791565b915050610f64565b509392505050565b6000610fc5610bca565b8210610fe35760405162461bcd60e51b81526004016109d2906135a1565b6008828154811061100457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b61101e611ca0565b6001600160a01b031661102f611424565b6001600160a01b0316146110555760405162461bcd60e51b81526004016109d290613413565b8051610ce7906011906020840190612846565b600a5460ff1690565b6000818152600260205260408120546001600160a01b031680610a215760405162461bcd60e51b81526004016109d2906132fe565b60006001600160a01b0382166110ce5760405162461bcd60e51b81526004016109d2906132b4565b506001600160a01b031660009081526003602052604090205490565b6110f2611ca0565b6001600160a01b0316611103611424565b6001600160a01b0316146111295760405162461bcd60e51b81526004016109d290613413565b6111336000611e7d565b565b61113d611ca0565b6001600160a01b031661114e611424565b6001600160a01b0316146111745760405162461bcd60e51b81526004016109d290613413565b6001600160a01b03811661119a5760405162461bcd60e51b81526004016109d2906134e0565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6111c4611ca0565b6001600160a01b03166111d5611424565b6001600160a01b0316146111fb5760405162461bcd60e51b81526004016109d290613413565b60005b81518110156112735760006001600160a01b031682828151811061123257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156112615760405162461bcd60e51b81526004016109d2906135ed565b8061126b81613791565b9150506111fe565b5060005b8151811015610ce7576001601460008484815181106112a657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806112e281613791565b915050611277565b6112f2611ca0565b6001600160a01b0316611303611424565b6001600160a01b0316146113295760405162461bcd60e51b81526004016109d290613413565b478061133457600080fd5b60405142907feede8f531dfe8867abb4d42c23573eb3fb93a5b7779d3f0bf3a86ce1c724985390600090a26013546040516000916001600160a01b031690839061137d90612dac565b60006040518083038185875af1925050503d80600081146113ba576040519150601f19603f3d011682016040523d82523d6000602084013e6113bf565b606091505b5050905080610ce75760405162461bcd60e51b81526004016109d290613045565b600080821180156113f557506113f582611cc9565b6114115760405162461bcd60e51b81526004016109d2906131b8565b5060009081526015602052604090205490565b600a5461010090046001600160a01b031690565b611440611ca0565b6001600160a01b0316611451611424565b6001600160a01b0316146114775760405162461bcd60e51b81526004016109d290613413565b8051610ce7906010906020840190612846565b606060018054610a5090613734565b60146020526000908152604090205460ff1681565b6114b6611ca0565b6001600160a01b0316826001600160a01b031614156114e75760405162461bcd60e51b81526004016109d290613181565b80600560006114f4611ca0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611538611ca0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115709190612e5d565b60405180910390a35050565b60008060008361ffff1611801561159d5750600f5461ffff90811690841611155b6115b95760405162461bcd60e51b81526004016109d29061309a565b8261ffff16600d546115cb91906136d2565b3410156115ea5760405162461bcd60e51b81526004016109d290612ef4565b600f5461ffff620100009091048116908416611605866110a6565b61160f91906136a6565b111561162d5760405162461bcd60e51b81526004016109d290613347565b600e548361ffff1661163f600b611ed7565b61164991906136a6565b11156116675760405162461bcd60e51b81526004016109d29061306e565b600c5460ff16156116aa576001600160a01b03841660009081526014602052604090205460ff166116aa5760405162461bcd60e51b81526004016109d290613139565b60005b8361ffff168161ffff1610156116ee576116c685611df5565b61ffff81166116dc576116d9600b611ed7565b92505b806116e68161376f565b9150506116ad565b506116f9600b611ed7565b90509250929050565b61171361170d611ca0565b83611d54565b61172f5760405162461bcd60e51b81526004016109d290613550565b61173b84848484611edb565b50505050565b611749611ca0565b6001600160a01b031661175a611424565b6001600160a01b0316146117805760405162461bcd60e51b81526004016109d290613413565b60005b8251811015610ba95781601560008584815181106117b157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806117d690613791565b915050611783565b600d5481565b60606117ef82611cc9565b61180b5760405162461bcd60e51b81526004016109d290613491565b6000611815611f0e565b905060008151116118355760405180602001604052806000815250611860565b8061183f84611f1d565b604051602001611850929190612d7d565b6040516020818303038152906040525b9392505050565b61186f611ca0565b6001600160a01b0316611880611424565b6001600160a01b0316146118a65760405162461bcd60e51b81526004016109d290613413565b8080156118b857506118b6611068565b155b156118ca576118c5612038565b610e9b565b801580156118db57506118db611068565b15610e9b57610e9b6120aa565b601180546118f590613734565b80601f016020809104026020016040519081016040528092919081815260200182805461192190613734565b801561196e5780601f106119435761010080835404028352916020019161196e565b820191906000526020600020905b81548152906001019060200180831161195157829003601f168201915b505050505081565b61197e611ca0565b6001600160a01b031661198f611424565b6001600160a01b0316146119b55760405162461bcd60e51b81526004016109d290613413565b600c805460ff1916911515919091179055565b6119d0611ca0565b6001600160a01b03166119e1611424565b6001600160a01b031614611a075760405162461bcd60e51b81526004016109d290613413565b600f805461ffff191661ffff92909216919091179055565b6013546001600160a01b031681565b601080546118f590613734565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611a71611ca0565b6001600160a01b0316611a82611424565b6001600160a01b031614611aa85760405162461bcd60e51b81526004016109d290613413565b600f805461ffff9092166401000000000265ffff0000000019909216919091179055565b6060611ad6611ca0565b6001600160a01b0316611ae7611424565b6001600160a01b031614611b0d5760405162461bcd60e51b81526004016109d290613413565b6000825167ffffffffffffffff811115611b3757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b60578160200160208202803683370190505b50905060005b8351811015611be75760156000858381518110611b9357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054828281518110611bca57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611bdf81613791565b915050611b66565b5092915050565b611bf6611ca0565b6001600160a01b0316611c07611424565b6001600160a01b031614611c2d5760405162461bcd60e51b81526004016109d290613413565b6001600160a01b038116611c535760405162461bcd60e51b81526004016109d290612fc8565b610e9b81611e7d565b611c64611ca0565b6001600160a01b0316611c75611424565b6001600160a01b031614611c9b5760405162461bcd60e51b81526004016109d290613413565b600d55565b3390565b60006001600160e01b0319821663780e9d6360e01b1480610a215750610a2182612101565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d1b82611071565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611d5f82611cc9565b611d7b5760405162461bcd60e51b81526004016109d2906131e1565b6000611d8683611071565b9050806001600160a01b0316846001600160a01b03161480611dc15750836001600160a01b0316611db684610ad3565b6001600160a01b0316145b80611dd15750611dd18185611a3b565b949350505050565b6000818152601560205260409020429055610ba9838383612141565b611dff600b61226e565b4260156000611e0e600b611ed7565b8152602081019190915260400160002055611e29600b611ed7565b6040517f128808f22de7bb1e3ffd9c206885e55a5e23da0baf99665e5146706b4dd1b89790600090a2610e9b81611e60600b611ed7565b612277565b600081815260156020526040812055610e9b81612291565b600a80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b5490565b611ee6848484611dd9565b611ef284848484612338565b61173b5760405162461bcd60e51b81526004016109d290612f76565b606060118054610a5090613734565b606081611f4257506040805180820190915260018152600360fc1b6020820152610a24565b8160005b8115611f6c5780611f5681613791565b9150611f659050600a836136be565b9150611f46565b60008167ffffffffffffffff811115611f9557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fbf576020820181803683370190505b5090505b8415611dd157611fd46001836136f1565b9150611fe1600a866137ac565b611fec9060306136a6565b60f81b81838151811061200f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612031600a866136be565b9450611fc3565b612040611068565b1561205d5760405162461bcd60e51b81526004016109d29061322d565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612093611ca0565b6040516120a09190612daf565b60405180910390a1565b6120b2611068565b6120ce5760405162461bcd60e51b81526004016109d290612ec6565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612093611ca0565b60006001600160e01b031982166380ac58cd60e01b148061213257506001600160e01b03198216635b5e139f60e01b145b80610a215750610a2182612453565b826001600160a01b031661215482611071565b6001600160a01b03161461217a5760405162461bcd60e51b81526004016109d290613448565b6001600160a01b0382166121a05760405162461bcd60e51b81526004016109d2906130f5565b6121ab83838361246c565b6121b6600082611ce6565b6001600160a01b03831660009081526003602052604081208054600192906121df9084906136f1565b90915550506001600160a01b038216600090815260036020526040812080546001929061220d9084906136a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b80546001019055565b610ce7828260405180602001604052806000815250612477565b600061229c82611071565b90506122aa8160008461246c565b6122b5600083611ce6565b6001600160a01b03811660009081526003602052604081208054600192906122de9084906136f1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600061234c846001600160a01b03166124aa565b1561244857836001600160a01b031663150b7a02612368611ca0565b8786866040518563ffffffff1660e01b815260040161238a9493929190612dc3565b602060405180830381600087803b1580156123a457600080fd5b505af19250505080156123d4575060408051601f3d908101601f191682019092526123d191810190612c9c565b60015b61242e573d808015612402576040519150601f19603f3d011682016040523d82523d6000602084013e612407565b606091505b5080516124265760405162461bcd60e51b81526004016109d290612f76565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611dd1565b506001949350505050565b6001600160e01b031981166301ffc9a760e01b14919050565b610ba98383836124b0565b61248183836124e0565b61248e6000848484612338565b610ba95760405162461bcd60e51b81526004016109d290612f76565b3b151590565b6124bb8383836125bf565b6124c3611068565b15610ba95760405162461bcd60e51b81526004016109d290612e7b565b6001600160a01b0382166125065760405162461bcd60e51b81526004016109d290613392565b61250f81611cc9565b1561252c5760405162461bcd60e51b81526004016109d29061300e565b6125386000838361246c565b6001600160a01b03821660009081526003602052604081208054600192906125619084906136a6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6125ca838383610ba9565b6001600160a01b0383166125e6576125e181612648565b612609565b816001600160a01b0316836001600160a01b03161461260957612609838261268c565b6001600160a01b0382166126255761262081612729565b610ba9565b826001600160a01b0316826001600160a01b031614610ba957610ba98282612802565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b60006001612699846110a6565b6126a391906136f1565b6000838152600760205260409020549091508082146126f6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061273b906001906136f1565b6000838152600960205260408120546008805493945090928490811061277157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106127a057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127e657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061280d836110a6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461285290613734565b90600052602060002090601f01602090048101928261287457600085556128ba565b82601f1061288d57805160ff19168380011785556128ba565b828001600101855582156128ba579182015b828111156128ba57825182559160200191906001019061289f565b506128c69291506128ca565b5090565b5b808211156128c657600081556001016128cb565b600067ffffffffffffffff8311156128f9576128f96137ec565b61290c601f8401601f1916602001613658565b905082815283838301111561292057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612947578081fd5b8135602061295c61295783613682565b613658565b8281528181019085830183850287018401881015612978578586fd5b855b858110156129965781358452928401929084019060010161297a565b5090979650505050505050565b80358015158114610a2457600080fd5b803561ffff81168114610a2457600080fd5b6000602082840312156129d6578081fd5b813561186081613802565b600080604083850312156129f3578081fd5b82356129fe81613802565b91506020830135612a0e81613802565b809150509250929050565b600080600060608486031215612a2d578081fd5b8335612a3881613802565b92506020840135612a4881613802565b929592945050506040919091013590565b60008060008060808587031215612a6e578081fd5b8435612a7981613802565b93506020850135612a8981613802565b925060408501359150606085013567ffffffffffffffff811115612aab578182fd5b8501601f81018713612abb578182fd5b612aca878235602084016128df565b91505092959194509250565b60008060408385031215612ae8578182fd5b8235612af381613802565b91506116f9602084016129a3565b60008060408385031215612b13578182fd5b8235612b1e81613802565b91506116f9602084016129b3565b60008060408385031215612b3e578182fd5b8235612b4981613802565b946020939093013593505050565b60006020808385031215612b69578182fd5b823567ffffffffffffffff811115612b7f578283fd5b8301601f81018513612b8f578283fd5b8035612b9d61295782613682565b8181528381019083850185840285018601891015612bb9578687fd5b8694505b83851015612be4578035612bd081613802565b835260019490940193918501918501612bbd565b50979650505050505050565b600060208284031215612c01578081fd5b813567ffffffffffffffff811115612c17578182fd5b611dd184828501612937565b60008060408385031215612c35578182fd5b823567ffffffffffffffff811115612c4b578283fd5b612c5785828601612937565b95602094909401359450505050565b600060208284031215612c77578081fd5b611860826129a3565b600060208284031215612c91578081fd5b813561186081613817565b600060208284031215612cad578081fd5b815161186081613817565b600060208284031215612cc9578081fd5b813567ffffffffffffffff811115612cdf578182fd5b8201601f81018413612cef578182fd5b611dd1848235602084016128df565b600060208284031215612d0f578081fd5b611860826129b3565b600060208284031215612d29578081fd5b5035919050565b60008060408385031215612d42578182fd5b50508035926020909101359150565b60008151808452612d69816020860160208601613708565b601f01601f19169290920160200192915050565b60008351612d8f818460208801613708565b835190830190612da3818360208801613708565b01949350505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612df690830184612d51565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612e5157835183529284019291840191600101612e35565b50909695505050505050565b901515815260200190565b6000602082526118606020830184612d51565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526017908201527f496e73756666696369656e74206d696e742076616c7565000000000000000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600f908201526e15da5d1a191c985dc819985a5b1959608a1b604082015260600190565b602080825260129082015271111c9bdc081b1a5b5a5d081c995858da195960721b604082015260600190565b60208082526015908201527410dbdd5b9d081d1bc81b5a5b9d081a5b9d985b1a59605a1b604082015260600190565b602080825260129082015271496e76616c69642073616c6520707269636560701b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526028908201527f526563697069656e74206973206e6f742070617274206f662077686974656c696040820152671cdd08195d995b9d60c21b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252600f908201526e125b9d985b1a59081d1bdad95b9259608a1b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602b908201527f546f6b656e206f776e657273686970206c696d697420666f722072656369706960408201526a195b9d081c995858da195960aa1b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526015908201527454726561737572792069732030206164647265737360581b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f4e65772077686974656c6973742063616e6e6f74206265207468652030206164604082015264647265737360d81b606082015260800190565b61ffff91909116815260200190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561367a5761367a6137ec565b604052919050565b600067ffffffffffffffff82111561369c5761369c6137ec565b5060209081020190565b600082198211156136b9576136b96137c0565b500190565b6000826136cd576136cd6137d6565b500490565b60008160001904831182151516156136ec576136ec6137c0565b500290565b600082821015613703576137036137c0565b500390565b60005b8381101561372357818101518382015260200161370b565b8381111561173b5750506000910152565b60028104600182168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415613787576137876137c0565b6001019392505050565b60006000198214156137a5576137a56137c0565b5060010190565b6000826137bb576137bb6137d6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e9b57600080fd5b6001600160e01b031981168114610e9b57600080fdfea2646970667358221220c0f051050dfa8ce6996acea64d1a882e27c6a59bf889dd9310d5a0a92b9e509c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1272,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1274,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1278,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1282,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1286,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1292,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2211,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2215,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2218,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2222,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 387,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_owner",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4773,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2954_storage"
      },
      {
        "astId": 4775,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "whitelistSaleEnabled",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 4777,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "minMintPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4779,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "maxTokensInCurrentDrop",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4781,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "maxTokensPerMint",
        "offset": 0,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 4783,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "maxTokensPerOwner",
        "offset": 2,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 4785,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "creatorRoyaltyBP",
        "offset": 4,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 4787,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 4789,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 4791,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "royaltyTreasury",
        "offset": 0,
        "slot": "18",
        "type": "t_address_payable"
      },
      {
        "astId": 4793,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "mintTreasury",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      },
      {
        "astId": 4797,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "whitelist",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4801,
        "contract": "contracts/tanuki-nft.sol:NuttyNooki",
        "label": "_ticketResetDates",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2954_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2953,
            "contract": "contracts/tanuki-nft.sol:NuttyNooki",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}