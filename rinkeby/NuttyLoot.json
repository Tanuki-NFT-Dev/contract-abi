{
  "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_creatorRoyaltyBP",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_royaltyTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticketer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "boxBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "itemBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "BalanceWithdrawl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CreateBox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CreateItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKETER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "boxInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorRoyaltyBP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "giveawayBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isBox",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "mintBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "openBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyTreasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boxBaseURI",
          "type": "string"
        }
      ],
      "name": "setBoxBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        }
      ],
      "name": "setBoxItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "boxIds",
          "type": "uint256[]"
        }
      ],
      "name": "setBoxTierIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemBaseURI",
          "type": "string"
        }
      ],
      "name": "setItemBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "setPauseState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "basePoints",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setRoyaltyTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
  "receipt": {
    "to": null,
    "from": "0xA50A977C76FB49Fbc3Ba68a4e73CF40053A688FE",
    "contractAddress": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
    "transactionIndex": 43,
    "gasUsed": "3693250",
    "logsBloom": "0x
    "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff",
    "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 9536755,
        "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
        "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe",
        "logIndex": 72,
        "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 9536755,
        "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
        "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 9536755,
        "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
        "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 9536755,
        "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
        "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb",
          "0x000000000000000000000000278d431b9bcfb1fe078f7e18296da3894e4a563e",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 9536755,
        "transactionHash": "0x18b580fc15ac880595854c0e08a03f4a90d6d79526eb756c2e6d877bf2fcb3b9",
        "address": "0x989985ff6d2b1e155780Fc9d0F0c34e0BD269F6b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe",
          "0x000000000000000000000000a50a977c76fb49fbc3ba68a4e73cf40053a688fe"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x65334c0ff5ea07de04ebe55e0aa75fb9b6907bb1b82331557fe0282e210961ff"
      }
    ],
    "blockNumber": 9536755,
    "cumulativeGasUsed": "12098464",
    "status": 1,
    "byzantium": true
  },
  "args": [
    850,
    "https://tanuki-metadata.s3.us-west-2.amazonaws.com/public/loot-contract.json",
    "0x18c05AEE87dCbc444e1fe27e4A65e8b8775f6365",
    "0x278d431B9bcfB1Fe078F7e18296dA3894e4A563e",
    "https://tanuki-metadata.s3.us-west-2.amazonaws.com/public/loot_boxes/",
    "https://tanuki-metadata.s3.us-west-2.amazonaws.com/public/loot_items/"
  ],
  "solcInputHash": "2ac7647d518c751c1fdadb1abc276bc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_creatorRoyaltyBP\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_royaltyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticketer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"boxBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreateBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreateItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKETER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"boxInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorRoyaltyBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"giveawayBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isBox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"mintBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"openBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boxBaseURI\",\"type\":\"string\"}],\"name\":\"setBoxBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"setBoxItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"boxIds\",\"type\":\"uint256[]\"}],\"name\":\"setBoxTierIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemBaseURI\",\"type\":\"string\"}],\"name\":\"setItemBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"setPauseState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"basePoints\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setRoyaltyTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loot-box.sol\":\"NuttyLoot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/loot-box.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract NuttyLoot is ERC721Enumerable, ERC721Pausable, IERC2981, AccessControl {\\n  struct BoxInfo {\\n    uint8 tier;\\n    uint id;\\n  }\\n\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIdTracker;\\n  uint16 public creatorRoyaltyBP;\\n  string public contractURI;\\n  string private _boxBaseURI;\\n  string private _itemBaseURI;\\n  address payable public royaltyTreasury;\\n  mapping(uint8 => uint[]) private _boxTierToIds;\\n  mapping(uint => uint[]) private _boxIdToItems;\\n  mapping(uint => BoxInfo) private _tokenIdToBoxInfo;\\n  mapping(uint => uint) private _tokenIdToItemId;\\n\\n  event CreateBox(uint indexed id);\\n  event CreateItem(uint indexed id);\\n  event BalanceWithdrawl(uint indexed time);\\n  event DonationReceived();\\n\\n  bytes32 public constant TICKETER = keccak256(\\\"TICKETER\\\");\\n  bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n  address payable private _owner;\\n\\n  constructor(uint16 _creatorRoyaltyBP, string memory _contractURI, address payable _royaltyTreasury,\\n  address _ticketer, string memory boxBaseURI, string memory itemBaseURI)\\n  ERC721(\\\"NuttyLoot\\\", \\\"NLT\\\") {\\n    require(_royaltyTreasury != address(0), \\\"Royalty treasury is 0 address\\\");\\n    require(_ticketer != address(0), \\\"Royalty treasury is 0 address\\\");\\n\\n    creatorRoyaltyBP = _creatorRoyaltyBP;\\n    contractURI = _contractURI;\\n    royaltyTreasury = _royaltyTreasury;\\n    _boxBaseURI = boxBaseURI;\\n    _itemBaseURI = itemBaseURI;\\n    _pause();\\n\\n    _setRoleAdmin(TICKETER, ADMIN);\\n    _setupRole(TICKETER, msg.sender);\\n    _setupRole(TICKETER, _ticketer);\\n    _setupRole(ADMIN, msg.sender);\\n    _owner = payable(msg.sender);\\n  }\\n\\n  function royaltyInfo(uint256, uint256 salePrice) external view override(IERC2981) returns (address receiver, uint256 royaltyAmount) {\\n    require(salePrice > 0, \\\"Invalid sale price\\\");\\n    return (royaltyTreasury, (salePrice * creatorRoyaltyBP) / 10000);\\n  }\\n\\n  function mintBox(address recipient, uint8 tier) public onlyRole(TICKETER) {\\n    require(tier > 0, \\\"Invalid box tier\\\");\\n    require(_boxTierToIds[tier].length > 0, \\\"Boxes for selected tier not available\\\");\\n\\n    uint boxIdIndex = _boxTierToIds[tier].length - 1;\\n    uint newTokenId = _generateNewTokenId();\\n    _tokenIdToBoxInfo[newTokenId] = BoxInfo({ tier: tier, id: _boxTierToIds[tier][boxIdIndex] });\\n    _boxTierToIds[tier].pop();\\n\\n    emit CreateBox(newTokenId);\\n    _safeMint(recipient, newTokenId);\\n  }\\n\\n  function openBox(address recipient, uint tokenId) external {\\n    require(_exists(tokenId), \\\"Token does not exist\\\");\\n    require(ownerOf(tokenId) == msg.sender || hasRole(ADMIN, msg.sender), \\\"Sender does not have permission to open box\\\");\\n    require(isBox(tokenId), \\\"Token is not a box\\\");\\n\\n    uint[] memory boxItems = _boxIdToItems[_tokenIdToBoxInfo[tokenId].id];\\n    require(boxItems.length > 0, \\\"Box has no attached items\\\");\\n\\n    for(uint i = 0; i < boxItems.length; i++) {\\n      _mintItem(recipient, boxItems[i]);\\n    }\\n\\n    delete _boxIdToItems[_tokenIdToBoxInfo[tokenId].id];\\n    _burn(tokenId);\\n  }\\n\\n  function _mintItem(address recipient, uint itemId) private {\\n    uint newTokenId = _generateNewTokenId();\\n    _tokenIdToItemId[newTokenId] = itemId;\\n    emit CreateItem(newTokenId);\\n    _safeMint(recipient, newTokenId);\\n  }\\n\\n  function _generateNewTokenId() private returns (uint) {\\n    _tokenIdTracker.increment();\\n    return _tokenIdTracker.current();\\n  }\\n\\n  function isBox(uint tokenId) public view returns (bool) {\\n    return _tokenIdToBoxInfo[tokenId].id != 0;\\n  }\\n\\n  function boxInfo(uint tokenId) public view returns (uint8 tier, uint boxId) {\\n    require(_exists(tokenId), \\\"Token does not exist\\\");\\n    require(isBox(tokenId), \\\"Token is not a box\\\");\\n\\n    tier = _tokenIdToBoxInfo[tokenId].tier;\\n    boxId = _tokenIdToBoxInfo[tokenId].id;\\n  }\\n\\n  function itemInfo(uint tokenId) public view returns (uint itemId) {\\n    require(_exists(tokenId), \\\"Token does not exist\\\");\\n    require(!isBox(tokenId), \\\"Token is not a item\\\");\\n\\n    itemId = _tokenIdToItemId[tokenId];\\n  }\\n\\n  function walletOfOwner(address ownerAddress) external view returns(uint[] memory) {\\n    uint tokenCount = balanceOf(ownerAddress);\\n    uint[] memory tokenIds = new uint[](tokenCount);\\n\\n    for (uint i = 0; i < tokenCount; i++) {\\n      tokenIds[i] = tokenOfOwnerByIndex(ownerAddress, i);\\n    }\\n\\n    return tokenIds;\\n  }\\n\\n  function burn(uint tokenId) external onlyRole(ADMIN) { _burn(tokenId); }\\n  function setRoyaltyBP(uint16 basePoints) external onlyRole(ADMIN) { creatorRoyaltyBP = basePoints; }\\n  function setContractURI(string calldata metadataURI) external onlyRole(ADMIN) { contractURI = metadataURI; }\\n  function setBoxBaseURI(string calldata boxBaseURI) external onlyRole(ADMIN) { _boxBaseURI = boxBaseURI; }\\n  function setItemBaseURI(string calldata itemBaseURI) external onlyRole(ADMIN) { _itemBaseURI = itemBaseURI; }\\n  function setBoxTierIds(uint8 tier, uint[] memory boxIds) external onlyRole(ADMIN) { _boxTierToIds[tier] = boxIds; }\\n  function setBoxItems(uint boxId, uint[] memory itemIds) external onlyRole(ADMIN) { _boxIdToItems[boxId] = itemIds; }\\n  function setRoyaltyTreasury(address payable treasury) external onlyRole(ADMIN) {\\n    require(treasury != address(0), \\\"Treasury is 0 address\\\");\\n    royaltyTreasury = treasury;\\n  }\\n  function setPauseState(bool pauseState) external onlyRole(ADMIN) {\\n    if(pauseState && !paused()) { _pause(); }\\n    else if(!pauseState && paused()) { _unpause(); }\\n  }\\n\\n  function withdrawAll() external payable onlyRole(ADMIN) {\\n    uint balance = address(this).balance;\\n    require(balance > 0);\\n\\n    emit BalanceWithdrawl(block.timestamp);\\n\\n    (bool success, ) = _owner.call{value: balance}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n  }\\n\\n  function giveawayBox(address[] memory recipients, uint8 tier) external onlyRole(ADMIN) {\\n    for(uint16 i = 0; i < recipients.length; i++) {\\n      mintBox(recipients[i], tier);\\n    }\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n    require(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n    \\n    if(isBox(tokenId)) {\\n      return string(abi.encodePacked(_boxBaseURI, Strings.toString(_tokenIdToBoxInfo[tokenId].tier)));\\n    } else {\\n      return string(abi.encodePacked(_itemBaseURI, Strings.toString(_tokenIdToItemId[tokenId])));\\n    }\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721) {\\n    delete _tokenIdToBoxInfo[tokenId];\\n    delete _tokenIdToItemId[tokenId];\\n    super._burn(tokenId);\\n  }\\n\\n  // override clashing extension functions\\n  function _beforeTokenTransfer(address from, address to, uint tokenId) internal override(ERC721Pausable, ERC721Enumerable) { super._beforeTokenTransfer(from, to, tokenId); }\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, ERC721, IERC165, AccessControl) returns(bool) {\\n    return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  receive() external payable { emit DonationReceived(); }\\n}\\n\",\"keccak256\":\"0xa8fbd17401c90e2663d711b5a8bd03b3e5820febccedf9910d6f39841ae72e77\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f4038038062003f40833981016040819052620000349162000535565b6040805180820182526009815268139d5d1d1e531bdbdd60ba1b60208083019182528351808501909452600384526213931560ea1b9084015281519192916200008091600091620003cc565b50805162000096906001906020840190620003cc565b5050600a805460ff19169055506001600160a01b038416620000d55760405162461bcd60e51b8152600401620000cc906200063f565b60405180910390fd5b6001600160a01b038316620000fe5760405162461bcd60e51b8152600401620000cc906200063f565b600d805461ffff191661ffff881617905584516200012490600e906020880190620003cc565b50601180546001600160a01b0319166001600160a01b03861617905581516200015590600f906020850190620003cc565b5080516200016b906010906020840190620003cc565b506200017662000210565b620001a060008051602062003f2083398151915260008051602062003f008339815191526200028b565b620001bb60008051602062003f2083398151915233620002e0565b620001d660008051602062003f2083398151915284620002e0565b620001f160008051602062003f0083398151915233620002e0565b5050601680546001600160a01b0319163317905550620006c992505050565b6200021a620002f0565b156200023a5760405162461bcd60e51b8152600401620000cc9062000615565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000272620002f9565b60405162000281919062000601565b60405180910390a1565b60006200029883620002fd565b6000848152600b6020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620002ec828262000315565b5050565b600a5460ff1690565b3390565b6000818152600b60205260409020600101545b919050565b620003218282620003a1565b620002ec576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200035d620002f9565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b828054620003da9062000676565b90600052602060002090601f016020900481019282620003fe576000855562000449565b82601f106200041957805160ff191683800117855562000449565b8280016001018555821562000449579182015b82811115620004495782518255916020019190600101906200042c565b50620004579291506200045b565b5090565b5b808211156200045757600081556001016200045c565b80516001600160a01b03811681146200031057600080fd5b600082601f8301126200049b578081fd5b81516001600160401b0380821115620004b857620004b8620006b3565b6040516020601f8401601f1916820181018381118382101715620004e057620004e0620006b3565b6040528382528584018101871015620004f7578485fd5b8492505b838310156200051a5785830181015182840182015291820191620004fb565b838311156200052b57848185840101525b5095945050505050565b60008060008060008060c087890312156200054e578182fd5b865161ffff8116811462000560578283fd5b60208801519096506001600160401b03808211156200057d578384fd5b6200058b8a838b016200048a565b96506200059b60408a0162000472565b9550620005ab60608a0162000472565b94506080890151915080821115620005c1578384fd5b620005cf8a838b016200048a565b935060a0890151915080821115620005e5578283fd5b50620005f489828a016200048a565b9150509295509295509295565b6001600160a01b0391909116815260200190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f526f79616c747920747265617375727920697320302061646472657373000000604082015260600190565b6002810460018216806200068b57607f821691505b60208210811415620006ad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61382780620006d96000396000f3fe6080604052600436106102815760003560e01c8063696d15b11161014f578063a9c47d12116100c1578063e8a3d4851161007a578063e8a3d485146107b0578063e985e9c5146107c5578063e9a7a546146107e5578063ed353b7f14610805578063f815c33914610825578063fd2e997e14610845576102b1565b8063a9c47d12146106f0578063b88d4fde14610710578063c87b56dd14610730578063cdb88ad114610750578063d547741f14610770578063d85c1e7e14610790576102b1565b806391d148541161011357806391d1485414610646578063938e3d7b1461066657806395d89b41146106865780639fa2c21b1461069b578063a217fddf146106bb578063a22cb465146106d0576102b1565b8063696d15b1146105c957806370a08231146105de57806374f32450146105fe578063793daa441461061e578063853828b61461063e576102b1565b80632a0acc6a116101f357806342842e0e116101ac57806342842e0e1461050757806342966c6814610527578063438b6300146105475780634f6ccce7146105745780635c975abb146105945780636352211e146105a9576102b1565b80632a0acc6a146104445780632a55205a146104595780632f2ff15d146104875780632f745c59146104a757806336568abe146104c75780633b98a7df146104e7576102b1565b806318057bb81161024557806318057bb81461037257806318160ddd146103945780631a0263ab146103b657806323b872dd146103d6578063248a9ca3146103f6578063260d68fa14610416576102b1565b806301ffc9a7146102b657806305e9ca9b146102ec57806306fdde031461030e578063081812fc14610330578063095ea7b314610350576102b1565b366102b1576040517fe554fffbd0e5c2a35b0a24fef85d4297554111caf74cc33cb4cc85a117bbe6e090600090a1005b600080fd5b3480156102c257600080fd5b506102d66102d1366004612a8c565b610865565b6040516102e39190612e03565b60405180910390f35b3480156102f857600080fd5b50610301610892565b6040516102e39190612d55565b34801561031a57600080fd5b506103236108a1565b6040516102e39190612e17565b34801561033c57600080fd5b5061030161034b366004612a50565b610933565b34801561035c57600080fd5b5061037061036b366004612935565b61097f565b005b34801561037e57600080fd5b50610387610a17565b6040516102e391906135b7565b3480156103a057600080fd5b506103a9610a21565b6040516102e39190612e0e565b3480156103c257600080fd5b506103706103d1366004612bb9565b610a27565b3480156103e257600080fd5b506103706103f1366004612805565b610a70565b34801561040257600080fd5b506103a9610411366004612a50565b610aa8565b34801561042257600080fd5b50610436610431366004612a50565b610abd565b6040516102e39291906135c6565b34801561045057600080fd5b506103a9610b2a565b34801561046557600080fd5b50610479610474366004612b98565b610b3c565b6040516102e3929190612da6565b34801561049357600080fd5b506103706104a2366004612a68565b610b98565b3480156104b357600080fd5b506103a96104c2366004612935565b610bb7565b3480156104d357600080fd5b506103706104e2366004612a68565b610c09565b3480156104f357600080fd5b506103706105023660046127b1565b610c4f565b34801561051357600080fd5b50610370610522366004612805565b610cb3565b34801561053357600080fd5b50610370610542366004612a50565b610cce565b34801561055357600080fd5b506105676105623660046127b1565b610cf2565b6040516102e39190612dbf565b34801561058057600080fd5b506103a961058f366004612a50565b610db0565b3480156105a057600080fd5b506102d6610e0b565b3480156105b557600080fd5b506103016105c4366004612a50565b610e14565b3480156105d557600080fd5b506103a9610e49565b3480156105ea57600080fd5b506103a96105f93660046127b1565b610e6d565b34801561060a57600080fd5b5061037061061936600461298b565b610eb1565b34801561062a57600080fd5b50610370610639366004612960565b610f23565b6103706110cf565b34801561065257600080fd5b506102d6610661366004612a68565b6111a1565b34801561067257600080fd5b50610370610681366004612ac4565b6111cc565b34801561069257600080fd5b506103236111f3565b3480156106a757600080fd5b506103706106b6366004612935565b611202565b3480156106c757600080fd5b506103a96113a5565b3480156106dc57600080fd5b506103706106eb366004612901565b6113aa565b3480156106fc57600080fd5b5061037061070b366004612ac4565b611478565b34801561071c57600080fd5b5061037061072b366004612845565b61149f565b34801561073c57600080fd5b5061032361074b366004612a50565b6114d8565b34801561075c57600080fd5b5061037061076b366004612a36565b61156d565b34801561077c57600080fd5b5061037061078b366004612a68565b6115ca565b34801561079c57600080fd5b506102d66107ab366004612a50565b6115e9565b3480156107bc57600080fd5b50610323611600565b3480156107d157600080fd5b506102d66107e03660046127cd565b61168e565b3480156107f157600080fd5b50610370610800366004612b31565b6116bc565b34801561081157600080fd5b50610370610820366004612b53565b6116f0565b34801561083157600080fd5b50610370610840366004612ac4565b61172a565b34801561085157600080fd5b506103a9610860366004612a50565b611751565b60006001600160e01b0319821663152a902d60e11b148061088a575061088a826117b1565b90505b919050565b6011546001600160a01b031681565b6060600080546108b0906136d8565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc906136d8565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b600061093e826117d6565b6109635760405162461bcd60e51b815260040161095a90613338565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098a82610e14565b9050806001600160a01b0316836001600160a01b031614156109be5760405162461bcd60e51b815260040161095a906133fc565b806001600160a01b03166109d06117f3565b6001600160a01b031614806109ec57506109ec816107e06117f3565b610a085760405162461bcd60e51b815260040161095a90613213565b610a1283836117f7565b505050565b600d5461ffff1681565b60085490565b6000805160206137d2833981519152610a4781610a426117f3565b611865565b60ff831660009081526012602090815260409091208351610a6a92850190612636565b50505050565b610a81610a7b6117f3565b826118c9565b610a9d5760405162461bcd60e51b815260040161095a9061343d565b610a1283838361194e565b6000908152600b602052604090206001015490565b600080610ac9836117d6565b610ae55760405162461bcd60e51b815260040161095a90613143565b610aee836115e9565b610b0a5760405162461bcd60e51b815260040161095a906131bd565b50506000908152601460205260409020805460019091015460ff90911691565b6000805160206137d283398151915281565b60008060008311610b5f5760405162461bcd60e51b815260040161095a90613057565b601154600d546001600160a01b039091169061271090610b839061ffff168661365f565b610b8d919061364b565b915091509250929050565b610ba182610aa8565b610bad81610a426117f3565b610a128383611a7b565b6000610bc283610e6d565b8210610be05760405162461bcd60e51b815260040161095a90612f5a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610c116117f3565b6001600160a01b0316816001600160a01b031614610c415760405162461bcd60e51b815260040161095a90613568565b610c4b8282611b02565b5050565b6000805160206137d2833981519152610c6a81610a426117f3565b6001600160a01b038216610c905760405162461bcd60e51b815260040161095a906133cd565b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b610a128383836040518060200160405280600081525061149f565b6000805160206137d2833981519152610ce981610a426117f3565b610c4b82611b87565b60606000610cff83610e6d565b905060008167ffffffffffffffff811115610d2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d53578160200160208202803683370190505b50905060005b82811015610da857610d6b8582610bb7565b828281518110610d8b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610da081613735565b915050610d59565b509392505050565b6000610dba610a21565b8210610dd85760405162461bcd60e51b815260040161095a9061348e565b60088281548110610df957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a5460ff1690565b6000818152600260205260408120546001600160a01b03168061088a5760405162461bcd60e51b815260040161095a906132ba565b7fa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb81565b60006001600160a01b038216610e955760405162461bcd60e51b815260040161095a90613270565b506001600160a01b031660009081526003602052604090205490565b6000805160206137d2833981519152610ecc81610a426117f3565b60005b83518161ffff161015610a6a57610f11848261ffff1681518110610f0357634e487b7160e01b600052603260045260246000fd5b602002602001015184610f23565b80610f1b81613713565b915050610ecf565b7fa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb610f5081610a426117f3565b60008260ff1611610f735760405162461bcd60e51b815260040161095a906134da565b60ff8216600090815260126020526040902054610fa25760405162461bcd60e51b815260040161095a906130fe565b60ff8216600090815260126020526040812054610fc19060019061367e565b90506000610fcd611bba565b905060405180604001604052808560ff168152602001601260008760ff1660ff168152602001908152602001600020848154811061101b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101549092528381526014825260408082208451815460ff191660ff91821617825594840151600190910155928716815260129091522080548061107b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055807f5953caea6cc62d91f9a883e1a8750b8ef0ad124df981377e875db39f64a0dca260405160405180910390a26110c88582611bd5565b5050505050565b6000805160206137d28339815191526110ea81610a426117f3565b47806110f557600080fd5b60405142907feede8f531dfe8867abb4d42c23573eb3fb93a5b7779d3f0bf3a86ce1c724985390600090a26016546040516000916001600160a01b031690839061113e90612cdd565b60006040518083038185875af1925050503d806000811461117b576040519150601f19603f3d011682016040523d82523d6000602084013e611180565b606091505b5050905080610a125760405162461bcd60e51b815260040161095a9061302e565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206137d28339815191526111e781610a426117f3565b610a6a600e8484612681565b6060600180546108b0906136d8565b61120b816117d6565b6112275760405162461bcd60e51b815260040161095a90613143565b3361123182610e14565b6001600160a01b0316148061125957506112596000805160206137d2833981519152336111a1565b6112755760405162461bcd60e51b815260040161095a90612ed8565b61127e816115e9565b61129a5760405162461bcd60e51b815260040161095a906131bd565b600081815260146020908152604080832060010154835260138252808320805482518185028101850190935280835291929091908301828280156112fd57602002820191906000526020600020905b8154815260200190600101908083116112e9575b5050505050905060008151116113255760405162461bcd60e51b815260040161095a90613531565b60005b8151811015611374576113628483838151811061135557634e487b7160e01b600052603260045260246000fd5b6020026020010151611bef565b8061136c81613735565b915050611328565b5060008281526014602090815260408083206001015483526013909152812061139c916126f5565b610a1282611b87565b600081565b6113b26117f3565b6001600160a01b0316826001600160a01b031614156113e35760405162461bcd60e51b815260040161095a906130c7565b80600560006113f06117f3565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114346117f3565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161146c9190612e03565b60405180910390a35050565b6000805160206137d283398151915261149381610a426117f3565b610a6a60108484612681565b6114b06114aa6117f3565b836118c9565b6114cc5760405162461bcd60e51b815260040161095a9061343d565b610a6a84848484611c3f565b60606114e3826117d6565b6114ff5760405162461bcd60e51b815260040161095a90612f23565b611508826115e9565b1561155257600082815260146020526040902054600f9061152b9060ff16611c72565b60405160200161153c929190612c37565b604051602081830303815290604052905061088d565b60008281526015602052604090205460109061152b90611c72565b6000805160206137d283398151915261158881610a426117f3565b81801561159a5750611598610e0b565b155b156115ac576115a7611d8d565b610c4b565b811580156115bd57506115bd610e0b565b15610c4b57610c4b611dff565b6115d382610aa8565b6115df81610a426117f3565b610a128383611b02565b600090815260146020526040902060010154151590565b600e805461160d906136d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611639906136d8565b80156116865780601f1061165b57610100808354040283529160200191611686565b820191906000526020600020905b81548152906001019060200180831161166957829003601f168201915b505050505081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000805160206137d28339815191526116d781610a426117f3565b50600d805461ffff191661ffff92909216919091179055565b6000805160206137d283398151915261170b81610a426117f3565b60008381526013602090815260409091208351610a6a92850190612636565b6000805160206137d283398151915261174581610a426117f3565b610a6a600f8484612681565b600061175c826117d6565b6117785760405162461bcd60e51b815260040161095a90613143565b611781826115e9565b1561179e5760405162461bcd60e51b815260040161095a90613504565b5060009081526015602052604090205490565b60006001600160e01b03198216637965db0b60e01b148061088a575061088a82611e56565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061182c82610e14565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61186f82826111a1565b610c4b57611887816001600160a01b03166014611e7b565b611892836020611e7b565b6040516020016118a3929190612ce0565b60408051601f198184030181529082905262461bcd60e51b825261095a91600401612e17565b60006118d4826117d6565b6118f05760405162461bcd60e51b815260040161095a90613171565b60006118fb83610e14565b9050806001600160a01b0316846001600160a01b031614806119365750836001600160a01b031661192b84610933565b6001600160a01b0316145b806119465750611946818561168e565b949350505050565b826001600160a01b031661196182610e14565b6001600160a01b0316146119875760405162461bcd60e51b815260040161095a90613384565b6001600160a01b0382166119ad5760405162461bcd60e51b815260040161095a90613083565b6119b8838383612034565b6119c36000826117f7565b6001600160a01b03831660009081526003602052604081208054600192906119ec90849061367e565b90915550506001600160a01b0382166000908152600360205260408120805460019290611a1a908490613633565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611a8582826111a1565b610c4b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611abe6117f3565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b0c82826111a1565b15610c4b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19169055611b436117f3565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000818152601460209081526040808320805460ff191681556001018390556015909152812055611bb78161203f565b50565b6000611bc6600c6120e6565b611bd0600c6120ef565b905090565b610c4b8282604051806020016040528060008152506120f3565b6000611bf9611bba565b6000818152601560205260408082208590555191925082917fdfe3e57736ff136c528786ad701a1b04e118a2c7a62a61f5fd8ea48b8729ea239190a2610a128382611bd5565b611c4a84848461194e565b611c5684848484612126565b610a6a5760405162461bcd60e51b815260040161095a90612fa5565b606081611c9757506040805180820190915260018152600360fc1b602082015261088d565b8160005b8115611cc15780611cab81613735565b9150611cba9050600a8361364b565b9150611c9b565b60008167ffffffffffffffff811115611cea57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d14576020820181803683370190505b5090505b841561194657611d2960018361367e565b9150611d36600a86613750565b611d41906030613633565b60f81b818381518110611d6457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d86600a8661364b565b9450611d18565b611d95610e0b565b15611db25760405162461bcd60e51b815260040161095a906131e9565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de86117f3565b604051611df59190612d55565b60405180910390a1565b611e07610e0b565b611e235760405162461bcd60e51b815260040161095a90612eaa565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611de86117f3565b60006001600160e01b0319821663780e9d6360e01b148061088a575061088a82612241565b60606000611e8a83600261365f565b611e95906002613633565b67ffffffffffffffff811115611ebb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ee5576020820181803683370190505b509050600360fc1b81600081518110611f0e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f6f84600261365f565b611f7a906001613633565b90505b600181111561200e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fbc57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611fe057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612007816136c1565b9050611f7d565b50831561202d5760405162461bcd60e51b815260040161095a90612e2a565b9392505050565b610a12838383612281565b600061204a82610e14565b905061205881600084612034565b6120636000836117f7565b6001600160a01b038116600090815260036020526040812080546001929061208c90849061367e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80546001019055565b5490565b6120fd83836122b1565b61210a6000848484612126565b610a125760405162461bcd60e51b815260040161095a90612fa5565b600061213a846001600160a01b0316612390565b1561223657836001600160a01b031663150b7a026121566117f3565b8786866040518563ffffffff1660e01b81526004016121789493929190612d69565b602060405180830381600087803b15801561219257600080fd5b505af19250505080156121c2575060408051601f3d908101601f191682019092526121bf91810190612aa8565b60015b61221c573d8080156121f0576040519150601f19603f3d011682016040523d82523d6000602084013e6121f5565b606091505b5080516122145760405162461bcd60e51b815260040161095a90612fa5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611946565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b148061227257506001600160e01b03198216635b5e139f60e01b145b8061088a575061088a82612396565b61228c8383836123af565b612294610e0b565b15610a125760405162461bcd60e51b815260040161095a90612e5f565b6001600160a01b0382166122d75760405162461bcd60e51b815260040161095a90613303565b6122e0816117d6565b156122fd5760405162461bcd60e51b815260040161095a90612ff7565b61230960008383612034565b6001600160a01b0382166000908152600360205260408120805460019290612332908490613633565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6123ba838383610a12565b6001600160a01b0383166123d6576123d181612438565b6123f9565b816001600160a01b0316836001600160a01b0316146123f9576123f9838261247c565b6001600160a01b0382166124155761241081612519565b610a12565b826001600160a01b0316826001600160a01b031614610a1257610a1282826125f2565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6000600161248984610e6d565b612493919061367e565b6000838152600760205260409020549091508082146124e6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061252b9060019061367e565b6000838152600960205260408120546008805493945090928490811061256157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061259057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125d657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006125fd83610e6d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054828255906000526020600020908101928215612671579160200282015b82811115612671578251825591602001919060010190612656565b5061267d92915061270f565b5090565b82805461268d906136d8565b90600052602060002090601f0160209004810192826126af5760008555612671565b82601f106126c85782800160ff19823516178555612671565b82800160010185558215612671579182015b828111156126715782358255916020019190600101906126da565b5080546000825590600052602060002090810190611bb791905b5b8082111561267d5760008155600101612710565b600082601f830112612734578081fd5b8135602061274961274483613603565b6135d9565b8281528181019085830183850287018401881015612765578586fd5b855b8581101561278357813584529284019290840190600101612767565b5090979650505050505050565b8035801515811461088d57600080fd5b803560ff8116811461088d57600080fd5b6000602082840312156127c2578081fd5b813561202d816137a6565b600080604083850312156127df578081fd5b82356127ea816137a6565b915060208301356127fa816137a6565b809150509250929050565b600080600060608486031215612819578081fd5b8335612824816137a6565b92506020840135612834816137a6565b929592945050506040919091013590565b6000806000806080858703121561285a578081fd5b8435612865816137a6565b9350602085810135612876816137a6565b935060408601359250606086013567ffffffffffffffff80821115612899578384fd5b818801915088601f8301126128ac578384fd5b8135818111156128be576128be613790565b6128d0601f8201601f191685016135d9565b915080825289848285010111156128e5578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215612913578182fd5b823561291e816137a6565b915061292c60208401612790565b90509250929050565b60008060408385031215612947578182fd5b8235612952816137a6565b946020939093013593505050565b60008060408385031215612972578182fd5b823561297d816137a6565b915061292c602084016127a0565b6000806040838503121561299d578182fd5b823567ffffffffffffffff8111156129b3578283fd5b8301601f810185136129c3578283fd5b803560206129d361274483613603565b82815281810190848301838502860184018a10156129ef578788fd5b8795505b84861015612a1a578035612a06816137a6565b8352600195909501949183019183016129f3565b509550612a2a90508682016127a0565b93505050509250929050565b600060208284031215612a47578081fd5b61202d82612790565b600060208284031215612a61578081fd5b5035919050565b60008060408385031215612a7a578182fd5b8235915060208301356127fa816137a6565b600060208284031215612a9d578081fd5b813561202d816137bb565b600060208284031215612ab9578081fd5b815161202d816137bb565b60008060208385031215612ad6578182fd5b823567ffffffffffffffff80821115612aed578384fd5b818501915085601f830112612b00578384fd5b813581811115612b0e578485fd5b866020828501011115612b1f578485fd5b60209290920196919550909350505050565b600060208284031215612b42578081fd5b813561ffff8116811461202d578182fd5b60008060408385031215612b65578182fd5b82359150602083013567ffffffffffffffff811115612b82578182fd5b612b8e85828601612724565b9150509250929050565b60008060408385031215612baa578182fd5b50508035926020909101359150565b60008060408385031215612bcb578182fd5b612bd4836127a0565b9150602083013567ffffffffffffffff811115612b82578182fd5b60008151808452612c07816020860160208601613695565b601f01601f19169290920160200192915050565b60008151612c2d818560208601613695565b9290920192915050565b8254600090819060028104600180831680612c5357607f831692505b6020808410821415612c7357634e487b7160e01b87526022600452602487fd5b818015612c875760018114612c9857612cc4565b60ff19861689528489019650612cc4565b612ca18b613627565b885b86811015612cbc5781548b820152908501908301612ca3565b505084890196505b505050505050612cd48185612c1b565b95945050505050565b90565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612d18816017850160208801613695565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d49816028840160208801613695565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d9c90830184612bef565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612df757835183529284019291840191600101612ddb565b50909695505050505050565b901515815260200190565b90815260200190565b60006020825261202d6020830184612bef565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f53656e64657220646f6573206e6f742068617665207065726d697373696f6e2060408201526a0e8de40dee0cadc40c4def60ab1b606082015260800190565b6020808252601f908201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e00604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600f908201526e15da5d1a191c985dc819985a5b1959608a1b604082015260600190565b602080825260129082015271496e76616c69642073616c6520707269636560701b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526025908201527f426f78657320666f722073656c65637465642074696572206e6f7420617661696040820152646c61626c6560d81b606082015260800190565b602080825260149082015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601290820152710a8ded6cadc40d2e640dcdee840c240c4def60731b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526015908201527454726561737572792069732030206164647265737360581b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526010908201526f24b73b30b634b2103137bc103a34b2b960811b604082015260600190565b602080825260139082015272546f6b656e206973206e6f742061206974656d60681b604082015260600190565b60208082526019908201527f426f7820686173206e6f206174746163686564206974656d7300000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b61ffff91909116815260200190565b60ff929092168252602082015260400190565b60405181810167ffffffffffffffff811182821017156135fb576135fb613790565b604052919050565b600067ffffffffffffffff82111561361d5761361d613790565b5060209081020190565b60009081526020902090565b6000821982111561364657613646613764565b500190565b60008261365a5761365a61377a565b500490565b600081600019048311821515161561367957613679613764565b500290565b60008282101561369057613690613764565b500390565b60005b838110156136b0578181015183820152602001613698565b83811115610a6a5750506000910152565b6000816136d0576136d0613764565b506000190190565b6002810460018216806136ec57607f821691505b6020821081141561370d57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff8083168181141561372b5761372b613764565b6001019392505050565b600060001982141561374957613749613764565b5060010190565b60008261375f5761375f61377a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611bb757600080fd5b6001600160e01b031981168114611bb757600080fdfedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a26469706673582212205ba6da91f39e5ae7e70201031c5b6d610928157e51a2000d271bf34d67ca196464736f6c63430008000033df8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb",
  "deployedBytecode": "0x6080604052600436106102815760003560e01c8063696d15b11161014f578063a9c47d12116100c1578063e8a3d4851161007a578063e8a3d485146107b0578063e985e9c5146107c5578063e9a7a546146107e5578063ed353b7f14610805578063f815c33914610825578063fd2e997e14610845576102b1565b8063a9c47d12146106f0578063b88d4fde14610710578063c87b56dd14610730578063cdb88ad114610750578063d547741f14610770578063d85c1e7e14610790576102b1565b806391d148541161011357806391d1485414610646578063938e3d7b1461066657806395d89b41146106865780639fa2c21b1461069b578063a217fddf146106bb578063a22cb465146106d0576102b1565b8063696d15b1146105c957806370a08231146105de57806374f32450146105fe578063793daa441461061e578063853828b61461063e576102b1565b80632a0acc6a116101f357806342842e0e116101ac57806342842e0e1461050757806342966c6814610527578063438b6300146105475780634f6ccce7146105745780635c975abb146105945780636352211e146105a9576102b1565b80632a0acc6a146104445780632a55205a146104595780632f2ff15d146104875780632f745c59146104a757806336568abe146104c75780633b98a7df146104e7576102b1565b806318057bb81161024557806318057bb81461037257806318160ddd146103945780631a0263ab146103b657806323b872dd146103d6578063248a9ca3146103f6578063260d68fa14610416576102b1565b806301ffc9a7146102b657806305e9ca9b146102ec57806306fdde031461030e578063081812fc14610330578063095ea7b314610350576102b1565b366102b1576040517fe554fffbd0e5c2a35b0a24fef85d4297554111caf74cc33cb4cc85a117bbe6e090600090a1005b600080fd5b3480156102c257600080fd5b506102d66102d1366004612a8c565b610865565b6040516102e39190612e03565b60405180910390f35b3480156102f857600080fd5b50610301610892565b6040516102e39190612d55565b34801561031a57600080fd5b506103236108a1565b6040516102e39190612e17565b34801561033c57600080fd5b5061030161034b366004612a50565b610933565b34801561035c57600080fd5b5061037061036b366004612935565b61097f565b005b34801561037e57600080fd5b50610387610a17565b6040516102e391906135b7565b3480156103a057600080fd5b506103a9610a21565b6040516102e39190612e0e565b3480156103c257600080fd5b506103706103d1366004612bb9565b610a27565b3480156103e257600080fd5b506103706103f1366004612805565b610a70565b34801561040257600080fd5b506103a9610411366004612a50565b610aa8565b34801561042257600080fd5b50610436610431366004612a50565b610abd565b6040516102e39291906135c6565b34801561045057600080fd5b506103a9610b2a565b34801561046557600080fd5b50610479610474366004612b98565b610b3c565b6040516102e3929190612da6565b34801561049357600080fd5b506103706104a2366004612a68565b610b98565b3480156104b357600080fd5b506103a96104c2366004612935565b610bb7565b3480156104d357600080fd5b506103706104e2366004612a68565b610c09565b3480156104f357600080fd5b506103706105023660046127b1565b610c4f565b34801561051357600080fd5b50610370610522366004612805565b610cb3565b34801561053357600080fd5b50610370610542366004612a50565b610cce565b34801561055357600080fd5b506105676105623660046127b1565b610cf2565b6040516102e39190612dbf565b34801561058057600080fd5b506103a961058f366004612a50565b610db0565b3480156105a057600080fd5b506102d6610e0b565b3480156105b557600080fd5b506103016105c4366004612a50565b610e14565b3480156105d557600080fd5b506103a9610e49565b3480156105ea57600080fd5b506103a96105f93660046127b1565b610e6d565b34801561060a57600080fd5b5061037061061936600461298b565b610eb1565b34801561062a57600080fd5b50610370610639366004612960565b610f23565b6103706110cf565b34801561065257600080fd5b506102d6610661366004612a68565b6111a1565b34801561067257600080fd5b50610370610681366004612ac4565b6111cc565b34801561069257600080fd5b506103236111f3565b3480156106a757600080fd5b506103706106b6366004612935565b611202565b3480156106c757600080fd5b506103a96113a5565b3480156106dc57600080fd5b506103706106eb366004612901565b6113aa565b3480156106fc57600080fd5b5061037061070b366004612ac4565b611478565b34801561071c57600080fd5b5061037061072b366004612845565b61149f565b34801561073c57600080fd5b5061032361074b366004612a50565b6114d8565b34801561075c57600080fd5b5061037061076b366004612a36565b61156d565b34801561077c57600080fd5b5061037061078b366004612a68565b6115ca565b34801561079c57600080fd5b506102d66107ab366004612a50565b6115e9565b3480156107bc57600080fd5b50610323611600565b3480156107d157600080fd5b506102d66107e03660046127cd565b61168e565b3480156107f157600080fd5b50610370610800366004612b31565b6116bc565b34801561081157600080fd5b50610370610820366004612b53565b6116f0565b34801561083157600080fd5b50610370610840366004612ac4565b61172a565b34801561085157600080fd5b506103a9610860366004612a50565b611751565b60006001600160e01b0319821663152a902d60e11b148061088a575061088a826117b1565b90505b919050565b6011546001600160a01b031681565b6060600080546108b0906136d8565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc906136d8565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b600061093e826117d6565b6109635760405162461bcd60e51b815260040161095a90613338565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098a82610e14565b9050806001600160a01b0316836001600160a01b031614156109be5760405162461bcd60e51b815260040161095a906133fc565b806001600160a01b03166109d06117f3565b6001600160a01b031614806109ec57506109ec816107e06117f3565b610a085760405162461bcd60e51b815260040161095a90613213565b610a1283836117f7565b505050565b600d5461ffff1681565b60085490565b6000805160206137d2833981519152610a4781610a426117f3565b611865565b60ff831660009081526012602090815260409091208351610a6a92850190612636565b50505050565b610a81610a7b6117f3565b826118c9565b610a9d5760405162461bcd60e51b815260040161095a9061343d565b610a1283838361194e565b6000908152600b602052604090206001015490565b600080610ac9836117d6565b610ae55760405162461bcd60e51b815260040161095a90613143565b610aee836115e9565b610b0a5760405162461bcd60e51b815260040161095a906131bd565b50506000908152601460205260409020805460019091015460ff90911691565b6000805160206137d283398151915281565b60008060008311610b5f5760405162461bcd60e51b815260040161095a90613057565b601154600d546001600160a01b039091169061271090610b839061ffff168661365f565b610b8d919061364b565b915091509250929050565b610ba182610aa8565b610bad81610a426117f3565b610a128383611a7b565b6000610bc283610e6d565b8210610be05760405162461bcd60e51b815260040161095a90612f5a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610c116117f3565b6001600160a01b0316816001600160a01b031614610c415760405162461bcd60e51b815260040161095a90613568565b610c4b8282611b02565b5050565b6000805160206137d2833981519152610c6a81610a426117f3565b6001600160a01b038216610c905760405162461bcd60e51b815260040161095a906133cd565b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b610a128383836040518060200160405280600081525061149f565b6000805160206137d2833981519152610ce981610a426117f3565b610c4b82611b87565b60606000610cff83610e6d565b905060008167ffffffffffffffff811115610d2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d53578160200160208202803683370190505b50905060005b82811015610da857610d6b8582610bb7565b828281518110610d8b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610da081613735565b915050610d59565b509392505050565b6000610dba610a21565b8210610dd85760405162461bcd60e51b815260040161095a9061348e565b60088281548110610df957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a5460ff1690565b6000818152600260205260408120546001600160a01b03168061088a5760405162461bcd60e51b815260040161095a906132ba565b7fa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb81565b60006001600160a01b038216610e955760405162461bcd60e51b815260040161095a90613270565b506001600160a01b031660009081526003602052604090205490565b6000805160206137d2833981519152610ecc81610a426117f3565b60005b83518161ffff161015610a6a57610f11848261ffff1681518110610f0357634e487b7160e01b600052603260045260246000fd5b602002602001015184610f23565b80610f1b81613713565b915050610ecf565b7fa8a81aa6ba1dbc812c33fd7ffef136dbca329ccc952397fcb9e5b494103ea5bb610f5081610a426117f3565b60008260ff1611610f735760405162461bcd60e51b815260040161095a906134da565b60ff8216600090815260126020526040902054610fa25760405162461bcd60e51b815260040161095a906130fe565b60ff8216600090815260126020526040812054610fc19060019061367e565b90506000610fcd611bba565b905060405180604001604052808560ff168152602001601260008760ff1660ff168152602001908152602001600020848154811061101b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101549092528381526014825260408082208451815460ff191660ff91821617825594840151600190910155928716815260129091522080548061107b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055807f5953caea6cc62d91f9a883e1a8750b8ef0ad124df981377e875db39f64a0dca260405160405180910390a26110c88582611bd5565b5050505050565b6000805160206137d28339815191526110ea81610a426117f3565b47806110f557600080fd5b60405142907feede8f531dfe8867abb4d42c23573eb3fb93a5b7779d3f0bf3a86ce1c724985390600090a26016546040516000916001600160a01b031690839061113e90612cdd565b60006040518083038185875af1925050503d806000811461117b576040519150601f19603f3d011682016040523d82523d6000602084013e611180565b606091505b5050905080610a125760405162461bcd60e51b815260040161095a9061302e565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206137d28339815191526111e781610a426117f3565b610a6a600e8484612681565b6060600180546108b0906136d8565b61120b816117d6565b6112275760405162461bcd60e51b815260040161095a90613143565b3361123182610e14565b6001600160a01b0316148061125957506112596000805160206137d2833981519152336111a1565b6112755760405162461bcd60e51b815260040161095a90612ed8565b61127e816115e9565b61129a5760405162461bcd60e51b815260040161095a906131bd565b600081815260146020908152604080832060010154835260138252808320805482518185028101850190935280835291929091908301828280156112fd57602002820191906000526020600020905b8154815260200190600101908083116112e9575b5050505050905060008151116113255760405162461bcd60e51b815260040161095a90613531565b60005b8151811015611374576113628483838151811061135557634e487b7160e01b600052603260045260246000fd5b6020026020010151611bef565b8061136c81613735565b915050611328565b5060008281526014602090815260408083206001015483526013909152812061139c916126f5565b610a1282611b87565b600081565b6113b26117f3565b6001600160a01b0316826001600160a01b031614156113e35760405162461bcd60e51b815260040161095a906130c7565b80600560006113f06117f3565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556114346117f3565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161146c9190612e03565b60405180910390a35050565b6000805160206137d283398151915261149381610a426117f3565b610a6a60108484612681565b6114b06114aa6117f3565b836118c9565b6114cc5760405162461bcd60e51b815260040161095a9061343d565b610a6a84848484611c3f565b60606114e3826117d6565b6114ff5760405162461bcd60e51b815260040161095a90612f23565b611508826115e9565b1561155257600082815260146020526040902054600f9061152b9060ff16611c72565b60405160200161153c929190612c37565b604051602081830303815290604052905061088d565b60008281526015602052604090205460109061152b90611c72565b6000805160206137d283398151915261158881610a426117f3565b81801561159a5750611598610e0b565b155b156115ac576115a7611d8d565b610c4b565b811580156115bd57506115bd610e0b565b15610c4b57610c4b611dff565b6115d382610aa8565b6115df81610a426117f3565b610a128383611b02565b600090815260146020526040902060010154151590565b600e805461160d906136d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611639906136d8565b80156116865780601f1061165b57610100808354040283529160200191611686565b820191906000526020600020905b81548152906001019060200180831161166957829003601f168201915b505050505081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000805160206137d28339815191526116d781610a426117f3565b50600d805461ffff191661ffff92909216919091179055565b6000805160206137d283398151915261170b81610a426117f3565b60008381526013602090815260409091208351610a6a92850190612636565b6000805160206137d283398151915261174581610a426117f3565b610a6a600f8484612681565b600061175c826117d6565b6117785760405162461bcd60e51b815260040161095a90613143565b611781826115e9565b1561179e5760405162461bcd60e51b815260040161095a90613504565b5060009081526015602052604090205490565b60006001600160e01b03198216637965db0b60e01b148061088a575061088a82611e56565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061182c82610e14565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61186f82826111a1565b610c4b57611887816001600160a01b03166014611e7b565b611892836020611e7b565b6040516020016118a3929190612ce0565b60408051601f198184030181529082905262461bcd60e51b825261095a91600401612e17565b60006118d4826117d6565b6118f05760405162461bcd60e51b815260040161095a90613171565b60006118fb83610e14565b9050806001600160a01b0316846001600160a01b031614806119365750836001600160a01b031661192b84610933565b6001600160a01b0316145b806119465750611946818561168e565b949350505050565b826001600160a01b031661196182610e14565b6001600160a01b0316146119875760405162461bcd60e51b815260040161095a90613384565b6001600160a01b0382166119ad5760405162461bcd60e51b815260040161095a90613083565b6119b8838383612034565b6119c36000826117f7565b6001600160a01b03831660009081526003602052604081208054600192906119ec90849061367e565b90915550506001600160a01b0382166000908152600360205260408120805460019290611a1a908490613633565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611a8582826111a1565b610c4b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611abe6117f3565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b0c82826111a1565b15610c4b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19169055611b436117f3565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000818152601460209081526040808320805460ff191681556001018390556015909152812055611bb78161203f565b50565b6000611bc6600c6120e6565b611bd0600c6120ef565b905090565b610c4b8282604051806020016040528060008152506120f3565b6000611bf9611bba565b6000818152601560205260408082208590555191925082917fdfe3e57736ff136c528786ad701a1b04e118a2c7a62a61f5fd8ea48b8729ea239190a2610a128382611bd5565b611c4a84848461194e565b611c5684848484612126565b610a6a5760405162461bcd60e51b815260040161095a90612fa5565b606081611c9757506040805180820190915260018152600360fc1b602082015261088d565b8160005b8115611cc15780611cab81613735565b9150611cba9050600a8361364b565b9150611c9b565b60008167ffffffffffffffff811115611cea57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d14576020820181803683370190505b5090505b841561194657611d2960018361367e565b9150611d36600a86613750565b611d41906030613633565b60f81b818381518110611d6457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d86600a8661364b565b9450611d18565b611d95610e0b565b15611db25760405162461bcd60e51b815260040161095a906131e9565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de86117f3565b604051611df59190612d55565b60405180910390a1565b611e07610e0b565b611e235760405162461bcd60e51b815260040161095a90612eaa565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611de86117f3565b60006001600160e01b0319821663780e9d6360e01b148061088a575061088a82612241565b60606000611e8a83600261365f565b611e95906002613633565b67ffffffffffffffff811115611ebb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ee5576020820181803683370190505b509050600360fc1b81600081518110611f0e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f6f84600261365f565b611f7a906001613633565b90505b600181111561200e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fbc57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611fe057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612007816136c1565b9050611f7d565b50831561202d5760405162461bcd60e51b815260040161095a90612e2a565b9392505050565b610a12838383612281565b600061204a82610e14565b905061205881600084612034565b6120636000836117f7565b6001600160a01b038116600090815260036020526040812080546001929061208c90849061367e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80546001019055565b5490565b6120fd83836122b1565b61210a6000848484612126565b610a125760405162461bcd60e51b815260040161095a90612fa5565b600061213a846001600160a01b0316612390565b1561223657836001600160a01b031663150b7a026121566117f3565b8786866040518563ffffffff1660e01b81526004016121789493929190612d69565b602060405180830381600087803b15801561219257600080fd5b505af19250505080156121c2575060408051601f3d908101601f191682019092526121bf91810190612aa8565b60015b61221c573d8080156121f0576040519150601f19603f3d011682016040523d82523d6000602084013e6121f5565b606091505b5080516122145760405162461bcd60e51b815260040161095a90612fa5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611946565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b148061227257506001600160e01b03198216635b5e139f60e01b145b8061088a575061088a82612396565b61228c8383836123af565b612294610e0b565b15610a125760405162461bcd60e51b815260040161095a90612e5f565b6001600160a01b0382166122d75760405162461bcd60e51b815260040161095a90613303565b6122e0816117d6565b156122fd5760405162461bcd60e51b815260040161095a90612ff7565b61230960008383612034565b6001600160a01b0382166000908152600360205260408120805460019290612332908490613633565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b6001600160e01b031981166301ffc9a760e01b14919050565b6123ba838383610a12565b6001600160a01b0383166123d6576123d181612438565b6123f9565b816001600160a01b0316836001600160a01b0316146123f9576123f9838261247c565b6001600160a01b0382166124155761241081612519565b610a12565b826001600160a01b0316826001600160a01b031614610a1257610a1282826125f2565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6000600161248984610e6d565b612493919061367e565b6000838152600760205260409020549091508082146124e6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061252b9060019061367e565b6000838152600960205260408120546008805493945090928490811061256157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061259057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125d657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006125fd83610e6d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054828255906000526020600020908101928215612671579160200282015b82811115612671578251825591602001919060010190612656565b5061267d92915061270f565b5090565b82805461268d906136d8565b90600052602060002090601f0160209004810192826126af5760008555612671565b82601f106126c85782800160ff19823516178555612671565b82800160010185558215612671579182015b828111156126715782358255916020019190600101906126da565b5080546000825590600052602060002090810190611bb791905b5b8082111561267d5760008155600101612710565b600082601f830112612734578081fd5b8135602061274961274483613603565b6135d9565b8281528181019085830183850287018401881015612765578586fd5b855b8581101561278357813584529284019290840190600101612767565b5090979650505050505050565b8035801515811461088d57600080fd5b803560ff8116811461088d57600080fd5b6000602082840312156127c2578081fd5b813561202d816137a6565b600080604083850312156127df578081fd5b82356127ea816137a6565b915060208301356127fa816137a6565b809150509250929050565b600080600060608486031215612819578081fd5b8335612824816137a6565b92506020840135612834816137a6565b929592945050506040919091013590565b6000806000806080858703121561285a578081fd5b8435612865816137a6565b9350602085810135612876816137a6565b935060408601359250606086013567ffffffffffffffff80821115612899578384fd5b818801915088601f8301126128ac578384fd5b8135818111156128be576128be613790565b6128d0601f8201601f191685016135d9565b915080825289848285010111156128e5578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215612913578182fd5b823561291e816137a6565b915061292c60208401612790565b90509250929050565b60008060408385031215612947578182fd5b8235612952816137a6565b946020939093013593505050565b60008060408385031215612972578182fd5b823561297d816137a6565b915061292c602084016127a0565b6000806040838503121561299d578182fd5b823567ffffffffffffffff8111156129b3578283fd5b8301601f810185136129c3578283fd5b803560206129d361274483613603565b82815281810190848301838502860184018a10156129ef578788fd5b8795505b84861015612a1a578035612a06816137a6565b8352600195909501949183019183016129f3565b509550612a2a90508682016127a0565b93505050509250929050565b600060208284031215612a47578081fd5b61202d82612790565b600060208284031215612a61578081fd5b5035919050565b60008060408385031215612a7a578182fd5b8235915060208301356127fa816137a6565b600060208284031215612a9d578081fd5b813561202d816137bb565b600060208284031215612ab9578081fd5b815161202d816137bb565b60008060208385031215612ad6578182fd5b823567ffffffffffffffff80821115612aed578384fd5b818501915085601f830112612b00578384fd5b813581811115612b0e578485fd5b866020828501011115612b1f578485fd5b60209290920196919550909350505050565b600060208284031215612b42578081fd5b813561ffff8116811461202d578182fd5b60008060408385031215612b65578182fd5b82359150602083013567ffffffffffffffff811115612b82578182fd5b612b8e85828601612724565b9150509250929050565b60008060408385031215612baa578182fd5b50508035926020909101359150565b60008060408385031215612bcb578182fd5b612bd4836127a0565b9150602083013567ffffffffffffffff811115612b82578182fd5b60008151808452612c07816020860160208601613695565b601f01601f19169290920160200192915050565b60008151612c2d818560208601613695565b9290920192915050565b8254600090819060028104600180831680612c5357607f831692505b6020808410821415612c7357634e487b7160e01b87526022600452602487fd5b818015612c875760018114612c9857612cc4565b60ff19861689528489019650612cc4565b612ca18b613627565b885b86811015612cbc5781548b820152908501908301612ca3565b505084890196505b505050505050612cd48185612c1b565b95945050505050565b90565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612d18816017850160208801613695565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d49816028840160208801613695565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d9c90830184612bef565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612df757835183529284019291840191600101612ddb565b50909695505050505050565b901515815260200190565b90815260200190565b60006020825261202d6020830184612bef565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f53656e64657220646f6573206e6f742068617665207065726d697373696f6e2060408201526a0e8de40dee0cadc40c4def60ab1b606082015260800190565b6020808252601f908201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e00604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600f908201526e15da5d1a191c985dc819985a5b1959608a1b604082015260600190565b602080825260129082015271496e76616c69642073616c6520707269636560701b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526025908201527f426f78657320666f722073656c65637465642074696572206e6f7420617661696040820152646c61626c6560d81b606082015260800190565b602080825260149082015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601290820152710a8ded6cadc40d2e640dcdee840c240c4def60731b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526015908201527454726561737572792069732030206164647265737360581b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526010908201526f24b73b30b634b2103137bc103a34b2b960811b604082015260600190565b602080825260139082015272546f6b656e206973206e6f742061206974656d60681b604082015260600190565b60208082526019908201527f426f7820686173206e6f206174746163686564206974656d7300000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b61ffff91909116815260200190565b60ff929092168252602082015260400190565b60405181810167ffffffffffffffff811182821017156135fb576135fb613790565b604052919050565b600067ffffffffffffffff82111561361d5761361d613790565b5060209081020190565b60009081526020902090565b6000821982111561364657613646613764565b500190565b60008261365a5761365a61377a565b500490565b600081600019048311821515161561367957613679613764565b500290565b60008282101561369057613690613764565b500390565b60005b838110156136b0578181015183820152602001613698565b83811115610a6a5750506000910152565b6000816136d0576136d0613764565b506000190190565b6002810460018216806136ec57607f821691505b6020821081141561370d57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff8083168181141561372b5761372b613764565b6001019392505050565b600060001982141561374957613749613764565b5060010190565b60008261375f5761375f61377a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611bb757600080fd5b6001600160e01b031981168114611bb757600080fdfedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a26469706673582212205ba6da91f39e5ae7e70201031c5b6d610928157e51a2000d271bf34d67ca196464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1272,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1274,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1278,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1282,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1286,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1292,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2211,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2215,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2218,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2222,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3491,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)2954_storage"
      },
      {
        "astId": 3493,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "creatorRoyaltyBP",
        "offset": 0,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 3495,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "contractURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 3497,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_boxBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3499,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_itemBaseURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3501,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "royaltyTreasury",
        "offset": 0,
        "slot": "17",
        "type": "t_address_payable"
      },
      {
        "astId": 3506,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_boxTierToIds",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3511,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_boxIdToItems",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3516,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_tokenIdToBoxInfo",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(BoxInfo)3484_storage)"
      },
      {
        "astId": 3520,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_tokenIdToItemId",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3546,
        "contract": "contracts/loot-box.sol:NuttyLoot",
        "label": "_owner",
        "offset": 0,
        "slot": "22",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(BoxInfo)3484_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NuttyLoot.BoxInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BoxInfo)3484_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BoxInfo)3484_storage": {
        "encoding": "inplace",
        "label": "struct NuttyLoot.BoxInfo",
        "members": [
          {
            "astId": 3481,
            "contract": "contracts/loot-box.sol:NuttyLoot",
            "label": "tier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3483,
            "contract": "contracts/loot-box.sol:NuttyLoot",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2954_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2953,
            "contract": "contracts/loot-box.sol:NuttyLoot",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/loot-box.sol:NuttyLoot",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/loot-box.sol:NuttyLoot",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}